@using LdapForNet
@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Locales
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService

<MudText Class="mt-2" Typo="Typo.h5" GutterBottom>@Localizer["ExternalTeachers"]</MudText>

<MudDataGrid T="ExternalTeacher" Items="@_externals" Hover SortMode="SortMode.Multiple" QuickFilter="@QuickFilter" Elevation="0">
    <ToolBarContent>
        <MudStack Row>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddExternalTeacher">@Localizer["Add"]</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateExternalTeacherRegistration">@Localizer["CreateRegistration"]</MudButton>
        </MudStack>
        <MudSpacer />
        <MudTextField Variant="Variant.Outlined" Label="@Localizer["Search"]" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.User.UserName" Title="@Localizer["Username"]" />
        <PropertyColumn Property="u => u.User.DisplayName" Title="@Localizer["FullName"]" />
        <PropertyColumn Property="u => u.User.Email" Title="Email" />
        <PropertyColumn Property="@(u => u.User.EmailConfirmed ? Localizer["Yes"] : Localizer["No"])" Title="@Localizer["ApprovedEmail"]" />
        <TemplateColumn Title="@Localizer["ProfileEdit"]">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="@Localizer["ExternalTeacherDelete"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteExternalTeacher(context.Item))" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["ExternalTeacherEdit"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateExternalTeacher(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ExternalTeacher" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<ExternalTeacher>? _externals;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadExternalTeachers();
    }

    private Func<ExternalTeacher, bool> QuickFilter => et =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (et.User.UserName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (et.User.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return et.User.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true || $"{et.User.UserName} {et.User.DisplayName} {et.User.Email}".Contains(_search);
    };

    private async Task AddExternalTeacher()
    {
        var dialog = await DialogService.ShowAsync<AddLdapUserDialog>(Localizer["UserAdd"], new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        if (result.Data is not LdapEntry entry) return;

        var user = await UsersService.RegisterLdapUserWithoutPasswordAsync(entry, ExternalTeacher.Role);

        await LoadExternalTeachers();
    }

    private async Task DeleteExternalTeacher(ExternalTeacher externalTeacher)
    {
        var result = await DialogService.ShowMessageBox(Localizer["UserDelete"], Localizer["UserDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        var user = externalTeacher.User;

        UnitOfWork.Teachers.Delete(externalTeacher);
        await UnitOfWork.CompleteAsync();
        await UsersService.DeleteUserAsync(user);

        await LoadExternalTeachers();
    }

    private async Task UpdateExternalTeacher(ExternalTeacher externalTeacher)
    {
        var parameters = new DialogParameters<EditTeacherDialog> { { d => d.Teacher, externalTeacher } };
        var dialog = await DialogService.ShowAsync<EditTeacherDialog>(Localizer["UserEdit"], parameters, new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        if (result.Data is not Teacher updatedTeacher) return;

        await UnitOfWork.Teachers.UpdateAsync(updatedTeacher);
        await UnitOfWork.CompleteAsync();
    }

    private async Task CreateExternalTeacherRegistration()
    {
        var parameters = new DialogParameters<InvitationLinkDialog> { { d => d.Role, ExternalTeacher.Role } };
        await DialogService.ShowAsync<InvitationLinkDialog>(Localizer["UserRegister"], parameters, new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Medium });
    }

    private async Task LoadExternalTeachers()
    {
        _externals = (await UnitOfWork.Teachers.GetAllAsync())?.OfType<ExternalTeacher>();
    }
}

