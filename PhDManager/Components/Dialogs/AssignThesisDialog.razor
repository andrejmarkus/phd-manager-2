@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Documents
@using PhDManager.Models.Roles
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Localizer["DissertationThesisAssign"]</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudAutocomplete T="Thesis" Clearable Label="@Localizer["DissertationThesis"]" ToStringFunc="@(t => t?.Title)" SearchFunc="SearchTeachers" Variant="Variant.Outlined" @bind-Value="Student.Thesis" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="@HandleDialog">@Localizer["Assign"]</MudButton>
        <MudButton Color="Color.Secondary" OnClick="@(() => MudDialog.Cancel())">@Localizer["Cancel"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public Student Student { get; set; } = null!;

    private MudForm _form = null!;
    private IEnumerable<Thesis>? _theses;

    protected override async Task OnInitializedAsync()
    {
        _theses = (await UnitOfWork.Theses.GetAllAsync())?.Where(t => t is { IsApproved: true, Student: null } && Student.StudyProgram == t.StudyProgram);
    }

    private Task<IEnumerable<Thesis>> SearchTeachers(string search, CancellationToken token)
    {
        return _theses is null ? Task.FromResult(Enumerable.Empty<Thesis>()) : Task.FromResult(string.IsNullOrWhiteSpace(search) ? _theses : _theses.Where(t => t.Title.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task HandleDialog()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        MudDialog.Close(DialogResult.Ok(Student));
    }
}
