@page "/theses/review"

@using Microsoft.AspNetCore.Authorization
@using PhDManager.Models
@using PhDManager.Services.IRepositories

@inject IUnitOfWork UnitOfWork

@attribute [Authorize(Roles = "Admin, Teacher, Reviewer")]

<PageTitle>Theses Review</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Theses Review</MudText>

<MudGrid>
    @if (Theses is not null)
    {
        @foreach (var thesis in Theses)
        {
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h6">@thesis.Title</MudText>
                    <MudText Typo="Typo.body2">@thesis.Description</MudText>
                    <div class="d-flex justify-space-between">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/{thesis.Guid}")">Detail</MudButton>
                        <AuthorizeView Roles="Admin, Reviewer">
                            <Authorized>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => AcceptThesis(thesis))">Accept</MudButton>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    IEnumerable<Thesis>? Theses;

    protected override async Task OnInitializedAsync()
    {
        Theses = (await UnitOfWork.Theses.GetAllAsync()).Where(t => !t.IsApproved).ToArray();
    }

    private async Task AcceptThesis(Thesis thesis)
    {
        thesis.IsApproved = true;
        await UnitOfWork.Theses.UpdateAsync(thesis.Id, thesis);
        await UnitOfWork.CompleteAsync();
    }
}
