@page "/admin/users"

@rendermode InteractiveServer

@using LdapForNet
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Models.DTOs
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IServiceProvider ServiceProvider
@inject IDialogService DialogService
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService
@inject UserManager<ApplicationUser> UserManager;

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Admin</MudText>

<MudDataGrid T="UserInfo" Items="@_users" Hover="true" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">Uživatelia</MudText>
        <MudSpacer />
        <MudTextField Class="mr-4" @bind-Value="_search" Variant="Variant.Outlined" Placeholder="Vyhľadaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _visible = true)">Pridaj uživateľa</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.User.UserName" Title="Používateľské meno" />
        <PropertyColumn Property="u => u.User.DisplayName" Title="Celé meno" />
        <PropertyColumn Property="u => u.User.Email" Title="Email" />
        <PropertyColumn Property="@(u => u.User.EmailConfirmed ? "Áno" : "Nie")" Title="Potvrdený email" />
        <PropertyColumn Property="u => u.Role" Title="Rola" Editable="true" />
        <TemplateColumn Title="Individuálny plán">
            <CellTemplate>
                <MudStack Row>
                    @if (context.Item.User.IndividualPlan is not null)
                    {
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteIndividualPlan(context.Item.User.IndividualPlan))" />
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/admin/individual-plan/edit/{context.Item.User.IndividualPlan.Guid}")" />
                    }
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Úprava profilu">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteUser(context.Item))" />
                    <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateUser(context.Item))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserInfo" />
    </PagerContent>
</MudDataGrid>

<AddUsersDialog Visible=_visible />

@code {
    private UserInfo[] _users = { };

    private string _search = "";
    private bool _visible = false;

    protected override async Task OnInitializedAsync()
    {


        var usersTask = UserManager.Users.ToList().Select(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var usersService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await usersService.GetUserRoleAsync(u);
            return new UserInfo(u, role);
        });

        _users = await Task.WhenAll(usersTask);
    }

    private Func<UserInfo, bool> _quickFilter => u =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (u.User.UserName.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (u.User.Email.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{u.User.UserName} {u.User.Email}".Contains(_search))
            return true;

        return false;
    };

    private async Task UpdateUser(UserInfo userInfo)
    {
        var parameters = new DialogParameters<EditUserDialog> { { x => x.UserInfo, userInfo } };
        var dialog = await DialogService.ShowAsync<EditUserDialog>("Uprav užívateľa", parameters);
        var result = await dialog.Result;

        if (result.Canceled) return;

        var updatedUserInfo = result.Data as UserInfo;
        await UsersService.UpdateUserInfoAsync(updatedUserInfo.User);
        await UsersService.UpdateUserRoleAsync(updatedUserInfo.User, updatedUserInfo.Role);
    }

    private async Task DeleteUser(UserInfo userInfo)
    {
        var user = userInfo.User;
        if (user.Address is not null) await UnitOfWork.Addresses.DeleteAsync(user.Address.Id);
        if (user.IndividualPlan is not null) await UnitOfWork.IndividualPlans.DeleteAsync(user.IndividualPlan.Id);
        user.SupervisorTheses.ForEach(async st => await UnitOfWork.Theses.DeleteAsync(st.Id));
        user.Comments.ForEach(async c => await UnitOfWork.Comments.DeleteAsync(c.Id));
        await UsersService.DeleteUserAsync(user);

        _users = _users.Where(u => u.User.Id != user.Id).ToArray();
    }

    private async Task DeleteIndividualPlan(IndividualPlan individualPlan)
    {
        await UnitOfWork.IndividualPlans.DeleteAsync(individualPlan.Id);
        await UnitOfWork.CompleteAsync();
    }
}
