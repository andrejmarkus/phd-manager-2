@page "/individual-plan"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject UsersService UsersService

@attribute [Authorize(Roles = $"{Student.Role}")]

<PageTitle>@Localizer["IndividualPlan"]</PageTitle>

@if (_individualPlan is not null && _individualPlan.Student.Thesis is not null)
{
    <MudText Align="Align.Center" Typo="Typo.h4">@Localizer["IndividualPlan"]</MudText>
    <MudPaper Class="pa-2">
        <MudStack Spacing="5">
            <MudStack>
                <MudText Typo="Typo.h6">@Localizer["DissertationThesis"]</MudText>
                <MudLink Typo="Typo.body1" Href="@($"/theses/{_individualPlan.Student.Thesis.Guid}")">@_individualPlan.Student.Thesis.Title</MudLink>
            </MudStack>
            <MudStack>
                <MudText Typo="Typo.h6">@Localizer["Subjects"]</MudText>
                @foreach (var subject in _individualPlan.Subjects)
                {
                    <MudText>@subject.Name</MudText>
                }
            </MudStack>
        </MudStack>
    </MudPaper>
}
else
{
    <MudText>@Localizer["IndividualPlanMissing"]</MudText>
}

@code {
    private IndividualPlan? _individualPlan;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await UsersService.GetCurrentUserIdAsync();
        if (currentUserId is not null)
        {
            _individualPlan = await UnitOfWork.IndividualPlans.GetByUserIdAsync(currentUserId);
        }
    }
}
