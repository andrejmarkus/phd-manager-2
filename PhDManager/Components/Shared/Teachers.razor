@using LdapForNet
@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService
@inject NavigationManager NavigationManager

<MudDataGrid T="Teacher" Items="@_teachers" Hover SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">@Localizer["Users"]</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddTeacher">@Localizer["UserAddLdap"]</MudButton>
        <MudButton Class="mx-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateTeacherRegistration">@Localizer["UserRegister"]</MudButton>
        <MudTextField Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.User.UserName" Title="@Localizer["Username"]" />
        <PropertyColumn Property="u => u.User.DisplayName" Title="@Localizer["FullName"]" />
        <PropertyColumn Property="u => u.User.Email" Title="Email" />
        <PropertyColumn Property="@(u => u.User.EmailConfirmed ? Localizer["Yes"] : Localizer["No"])" Title="@Localizer["ApprovedEmail"]" />
        <TemplateColumn Title="@Localizer["ProfileEdit"]">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="@Localizer["TeacherDelete"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteTeacher(context.Item))" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["StudentEdit"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateTeacher(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Teacher" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<Teacher>? _teachers;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeachers();
    }

    private Func<Teacher, bool> _quickFilter => e =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (e.User.UserName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (e.User.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (e.User.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if ($"{e.User.UserName} {e.User.DisplayName} {e.User.Email}".Contains(_search))
            return true;

        return false;
    };

    private async Task AddTeacher()
    {
        var dialog = await DialogService.ShowAsync<AddLdapUserDialog>(Localizer["UserAdd"], new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var entry = result.Data as LdapEntry;

        if (entry is null) return;

        var user = await UsersService.RegisterLdapUserWithoutPasswordAsync(entry, Teacher.Role);
        await UsersService.AddTeacherToUser(user, new());
        await UnitOfWork.CompleteAsync();

        await LoadTeachers();
    }

    private async Task CreateTeacherRegistration()
    {
        var parameters = new DialogParameters<RegistrationLinkDialog> { { d => d.Role, Teacher.Role } };
        await DialogService.ShowAsync<RegistrationLinkDialog>(Localizer["UserRegister"], parameters, new() { FullWidth = true, MaxWidth = MaxWidth.Medium });
    }

    private async Task DeleteTeacher(Teacher teacher)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["UserDelete"], Localizer["UserDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        var user = teacher.User;

        UnitOfWork.Teachers.Delete(teacher);
        await UnitOfWork.CompleteAsync();
        await UsersService.DeleteUserAsync(user);

        await LoadTeachers();
    }

    private async Task UpdateTeacher(Teacher teacher)
    {
        var parameters = new DialogParameters<EditTeacherDialog> { { d => d.Teacher, teacher } };
        var dialog = await DialogService.ShowAsync<EditTeacherDialog>(Localizer["UserEdit"], parameters, new() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var updatedTeacher = result.Data as Teacher;

        if (updatedTeacher is null) return;

        await UnitOfWork.Teachers.UpdateAsync(updatedTeacher);
        await UnitOfWork.CompleteAsync();
    }

    private async Task LoadTeachers()
    {
        _teachers = (await UnitOfWork.Teachers.GetAllAsync())?.Where(t => t is not ExternalTeacher);
    }
}
