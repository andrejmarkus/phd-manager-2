@page "/management/theses/review"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IJSRuntime JSRuntime
@inject IUnitOfWork UnitOfWork
@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IStringLocalizer<Enums> EnumLocalizer
@inject DocumentService DocumentService
@inject UsersService UsersService
@inject SchoolYearService SchoolYearService

@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}, {ExternalTeacher.Role}")]

<PageTitle>@Localizer["DissertationThesesPending"]</PageTitle>

<MudDataGrid T="Thesis" Items="_theses" Hover SortMode="SortMode.Multiple" QuickFilter="_quickFilter" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">@Localizer["DissertationThesesPending"]</MudText>
        <MudSpacer />
        <MudTextField Class="ml-4" Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="t => t.Title" Title="@Localizer["DissertationThesisTitle"]" />
        <PropertyColumn Property="t => t.Supervisor.User.DisplayName" Title="@Localizer["SupervisorName"]" />
        <PropertyColumn Property="t => t.Supervisor.User.Email" Title="@Localizer["SupervisorEmail"]" />
        <PropertyColumn Property="t => t.StudyProgram.Name" Title="@Localizer["StudyProgram"]" />
        <PropertyColumn Property="t => t.ResearchType" Title="@Localizer["ResearchType"]" />
        <PropertyColumn Property="@(t => t.DailyStudy ? "Áno" : "Nie")" Title="@EnumLocalizer["StudyFormDaily"]" />
        <PropertyColumn Property="@(t => t.ExternalStudy ? "Áno" : "Nie")" Title="@EnumLocalizer["StudyFormExternal"]" />
        <PropertyColumn Property="t => t.Comments.Count" Title="@Localizer["CommentsCount"]" />
        <TemplateColumn Title="@Localizer["DisserationThesisEdit"]">
            <CellTemplate>
                <MudStack Row>
                    <AuthorizeView Roles="@($"{Admin.Role}")" Context="adminContext">
                        <Authorized>
                            <MudTooltip Text="@Localizer["DissertationThesisApprove"]">
                                <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Check" OnClick="@(async () => await ApproveThesis(context.Item))" />
                            </MudTooltip>
                        </Authorized>
                    </AuthorizeView>
                    <MudTooltip Text="@Localizer["DisserationThesisShow"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.ContactPage" Href="@($"/theses/{context.Item.Guid}")" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["DisserationThesisEdit"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/management/theses/edit/{context.Item.Guid}")" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["DissertationThesisDelete"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteThesis(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<Thesis>? _theses;

    private string? _currentUserRole;
    private string? _currentUserId;
    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _currentUserRole = await UsersService.GetCurrentUserRoleAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();

        await LoadTheses();
    }

    private Func<Thesis, bool> _quickFilter => t =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (t.Title.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (t.Supervisor.User.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (t.Supervisor.User.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if ($"{t.Title} {t.Supervisor.User.DisplayName} {t.Supervisor.User.Email}".Contains(_search))
            return true;

        return false;
    };

    private async Task ApproveThesis(Thesis thesis)
    {
        thesis.IsApproved = true;
        foreach (var comment in thesis.Comments)
        {
            UnitOfWork.Comments.Delete(comment);
        }
        await UnitOfWork.Theses.UpdateAsync(thesis);
        await UnitOfWork.CompleteAsync();
        await LoadTheses();
    }

    private async Task DeleteThesis(Thesis thesis)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["DissertationThesisDelete"], Localizer["DissertationThesisDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        foreach (var comment in thesis.Comments)
        {
            UnitOfWork.Comments.Delete(comment);
        }
        UnitOfWork.Theses.Delete(thesis);
        await UnitOfWork.CompleteAsync();
        await LoadTheses();
    }

    private async Task LoadTheses()
    {
        _theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = _theses?.Where(t => !t.IsApproved);

        if (_currentUserRole == Teacher.Role)
        {
            _theses = _theses?.Where(t => t.Supervisor.User.Id == _currentUserId);
        }
    }
}
