@using LdapForNet
@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService

<MudText Class="mt-2" Typo="Typo.h5" GutterBottom>@Localizer["Departments"]</MudText>

<MudDataGrid T="Department" Items="@_departments" Hover SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Elevation="0">
    <ToolBarContent>
        <MudButton class="mx-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddDepartment">@Localizer["Add"]</MudButton>
        <MudSpacer />
        <MudTextField Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="d => d.Name" Title="@Localizer["DepartmentName"]" />
        <PropertyColumn Property="d => d.Code" Title="@Localizer["DepartmentCode"]" />
        <TemplateColumn Title="@Localizer["DepartmentEdit"]">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="@Localizer["DepartmentDelete"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteDepartment(context.Item))" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["DepartmentEdit"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateDepartment(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Department" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<Department>? _departments;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
    }

    private Func<Department, bool> _quickFilter => d =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (d.Name.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (d.Code.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if ($"{d.Name} {d.Code}".Contains(_search))
            return true;

        return false;
    };

    private async Task AddDepartment()
    {
        var dialog = await DialogService.ShowAsync<ManageDepartmentDialog>(Localizer["DepartmentAdd"], new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var department = result.Data as Department;

        if (department is null) return;

        await UnitOfWork.Departments.AddAsync(department);
        await UnitOfWork.CompleteAsync();
        await LoadDepartments();
    }

    private async Task UpdateDepartment(Department department)
    {
        var parameters = new DialogParameters<ManageDepartmentDialog> { { d => d.Department, department } };
        var dialog = await DialogService.ShowAsync<ManageDepartmentDialog>(Localizer["DepartmentEdit"], parameters, new() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var updatedDepartment = result.Data as Department;

        if (updatedDepartment is null) return;

        await UnitOfWork.Departments.UpdateAsync(updatedDepartment);
        await UnitOfWork.CompleteAsync();
        await LoadDepartments();
    }

    private async Task DeleteDepartment(Department department)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["DepartmentDelete"], Localizer["DepartmentDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        UnitOfWork.Departments.Delete(department);
        await UnitOfWork.CompleteAsync();
        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        _departments = await UnitOfWork.Departments.GetAllAsync();
    }
}
