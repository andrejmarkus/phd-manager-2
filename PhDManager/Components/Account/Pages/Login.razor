@page "/Account/LoginExtern"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales

@inject ILogger<Login> Logger
@inject IStringLocalizer<Resources> Localizer
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>@Localizer["SignIn"]</PageTitle>

<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
    <MudText Typo="Typo.h3" GutterBottom="true">@Localizer["SignInExternal"]</MudText>
    <MudImage Class="height-half" Src="@Assets["fingerprint.svg"]" />

    <MudStack Class="width-three-quarters" Spacing="5">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <MudText GutterBottom="true" Typo="Typo.body1">@Localizer["SignInExternalMessage"]</MudText>

            <MudStack Spacing="3">
                <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                    Variant="Variant.Outlined"
                    Label="@Localizer["Username"]"
                    UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                    Variant="Variant.Outlined"
                    Label="@Localizer["Password"]" InputType="InputType.Password"
                    UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">@Localizer["RememberLogin"]</MudStaticCheckBox>
                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">@Localizer["SignIn"]</MudStaticButton>
            </MudStack>
        </EditForm>

        <MudText GutterBottom="true" Typo="Typo.body1">@Localizer["SignInExternalService"]</MudText>
        <ExternalLoginPicker />

        <MudGrid>
            <MudItem md="12">
                <MudLink Href="Account/ForgotPassword">@Localizer["SignInExternalForgottenPassword"]</MudLink><br />
                <MudLink Href="Account/ResendEmailConfirmation">@Localizer["SignInExternalResendEmail"]</MudLink>
            </MudItem>
        </MudGrid>
    </MudStack>
</MudStack>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Display(Name = "Remember login")]
        public bool RememberMe { get; set; }
    }
}
