@page "/my-theses"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject IDialogService DialogService
@inject UsersService UsersService
@inject DocumentService DocumentService
@inject SchoolYearService SchoolYearService

@attribute [Authorize(Roles = $"{Teacher.Role}")]

<PageTitle>@Localizer["DissertationThesesMy"]</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["DissertationThesesMy"]</MudText>

<MudStack Row>
    <MudTextField FullWidth T="string" @bind-Value="@_search" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["Search"]" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    <MudSelect T="bool?" @bind-Value="@_approved" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["Approved"]" Variant="Variant.Outlined">
        <MudSelectItem T="bool?" Value="null">@Localizer["All"]</MudSelectItem>
        <MudSelectItem T="bool?" Value="true">@Localizer["Yes"]</MudSelectItem>
        <MudSelectItem T="bool?" Value="false">@Localizer["No"]</MudSelectItem>
    </MudSelect>
    @if (_studyPrograms is not null)
    {
        <MudSelect T="StudyProgram" @bind-Value="@_selectedStudyProgram" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined">
            <MudSelectItem T="StudyProgram" Value="null">@Localizer["All"]</MudSelectItem>
            @foreach (var studyProgram in _studyPrograms)
            {
                <MudSelectItem Value="@studyProgram">@studyProgram.Name</MudSelectItem>
            }
        </MudSelect>
    }
    @if (_schoolYears is not null)
    {
        <MudSelect T="string" @bind-Value="@_selectedSchoolYear" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["SchoolYear"]" Variant="Variant.Outlined">
            @foreach (var schoolYear in _schoolYears)
            {
                <MudSelectItem Value="@schoolYear">@schoolYear</MudSelectItem>
            }
        </MudSelect>
    }
</MudStack>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/theses/add">@Localizer["Add"]</MudButton>

<MudGrid Class="mt-1">
    @if (_theses is not null)
    {
        @foreach (var thesis in _theses)
        {
            <MudItem xs="6" md="4" lg="3">
                <MudPaper Class="pa-2">
                    <MudLink Color="Color.Default" Underline="Underline.None" Href="@($"/theses/{thesis.Guid}")">
                        @if (thesis.IsApproved)
                        {
                            <MudChip T="string" Variant="Variant.Text" Color="Color.Success">@Localizer["Approved"]</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Variant="Variant.Text" Color="Color.Error">@Localizer["NotApproved"]</MudChip>
                        }
                        <MudText Typo="Typo.h6">@thesis.Title</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["Supervisor"]: </b> @thesis.Supervisor.User.DisplayName</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["StudyProgram"]: </b> @thesis.StudyProgram.Name</MudText>
                        <MudText Typo="Typo.body2">
                            <b>@Localizer["StudyForm"]: </b>
                            @if (thesis.DailyStudy)
                            {
                                <span>@Localizer["StudyFormDaily"]</span>
                            }
                            @if (thesis.DailyStudy && thesis.ExternalStudy)
                            {
                                <span>, </span>
                            }
                            @if (thesis.ExternalStudy)
                            {
                                <span>@Localizer["StudyFormExternal"]</span>
                            }
                        </MudText>
                    </MudLink>
                    <AuthorizeView Roles="@($"{Teacher.Role}")">
                        <Authorized>
                            @if (_currentUserId?.Equals(thesis.Supervisor.User.Id) == true)
                            {
                                <MudStack Row Class="mt-2">
                                    <MudStack Row Justify="Justify.SpaceBetween">
                                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteThesis(thesis))" />
                                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/theses/edit/{thesis.Guid}")" />
                                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Print" OnClick="@(async () => await DocumentService.DownloadThesisDocument(thesis))" />
                                    </MudStack>
                                    @if (thesis.SchoolYear != SchoolYearService.CurrentSchoolYear)
                                    {
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => DuplicateThesis(thesis))">@Localizer["Renew"]</MudButton>
                                    }
                                </MudStack>
                            }
                        </Authorized>
                    </AuthorizeView>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private IEnumerable<Thesis>? _theses;
    private IEnumerable<StudyProgram>? _studyPrograms;
    private IEnumerable<string>? _schoolYears;
    private string? _currentUserId;

    private string _search = "";
    private StudyProgram? _selectedStudyProgram;
    private bool? _approved;
    private string? _selectedSchoolYear;

    protected override async Task OnInitializedAsync()
    {
        _currentUserId = await UsersService.GetCurrentUserIdAsync();
        var theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = theses?.Where(t => t.Supervisor.User.Id == _currentUserId).ToArray();
        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
        _schoolYears = await UnitOfWork.Theses.GetAllSchoolYearsAsync();

        _selectedSchoolYear = SchoolYearService.CurrentSchoolYear;
    }

    private async Task DuplicateThesis(Thesis thesis)
    {
        var currentSchoolYear = SchoolYearService.CurrentSchoolYear;
        if (thesis.SchoolYear == currentSchoolYear) return;

        thesis.SchoolYear = currentSchoolYear;
        await UnitOfWork.Theses.AddAsync(thesis);
        await UnitOfWork.CompleteAsync();
        _theses = _theses?.Where(t => t.Id != thesis.Id);
    }

    private async Task DeleteThesis(Thesis thesis)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["DissertationThesisDelete"], Localizer["DissertationThesisDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        foreach (var comment in thesis.Comments)
        {
            UnitOfWork.Comments.Delete(comment);
        }
        UnitOfWork.Theses.Delete(thesis);
        await UnitOfWork.CompleteAsync();
        _theses = _theses?.Where(t => t.Id != thesis.Id);
    }

    private async Task UpdateSearch()
    {
        var theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = theses?.Where(t => t.Supervisor.User.Id == _currentUserId).Where(t => t.Title.ToLower().Contains(_search.ToLower()) || t.TitleEnglish?.ToLower().Contains(_search.ToLower()) == true).ToArray();
        if (_selectedStudyProgram is not null)
        {
            _theses = _theses?.Where(t => t.StudyProgram == _selectedStudyProgram).ToArray();
        }
        if (_selectedSchoolYear is not null)
        {
            _theses = _theses?.Where(t => t.SchoolYear == _selectedSchoolYear).ToArray();
        }
        if (_approved is null) return;
        _theses = _theses?.Where(t => t.IsApproved == _approved).ToArray();
    }
}
