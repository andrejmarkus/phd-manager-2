@page "/management/theses/add"
@page "/management/theses/edit/{ThesisGuid}"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IServiceProvider ServiceProvider
@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject UsersService UsersService
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject SchoolYearService SchoolYearService
@inject UsersService UsersService

@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}")]

<PageTitle>@(ThesisGuid is null ? Localizer["DissertationThesisAdd"] : Localizer["DisserationThesisEdit"])</PageTitle>

@if (_systemState is not null && _systemState.IsOpen)
{
    <MudText Class="mb-5" Typo="Typo.h3">@Localizer["DissertationThesisProposal"]</MudText>

    <MudForm @ref="_form">
        <MudText Typo="Typo.h5">@Localizer["DissertationThesisAssignment"]</MudText>
        <MudCheckBox T="bool" @bind-Value="_isEnglish">@Localizer["DissertationThesisEnglish"]</MudCheckBox>
        <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisTitleError"]" Label="@Localizer["DissertationThesisTitle"]" Variant="Variant.Outlined" @bind-Value="_thesis.Title" />
        @if (_isEnglish)
        {
            <MudTextField T="string" Label="Dissertation thesis title" Variant="Variant.Outlined" @bind-Value="_thesis.TitleEnglish" />
        }
        <MudAutocomplete T="Teacher" Required RequiredError="@Localizer["SupervisorError"]" Label="@Localizer["Supervisor"]" ToStringFunc="@(t => t is null ? null : t.User.DisplayName)" SearchFunc="SearchTeachers" Variant="Variant.Outlined" @bind-Value="_thesis.Supervisor" />
        <MudAutocomplete T="Teacher" Label="@Localizer["SupervisorSpecialist"]" ToStringFunc="@(t => t is null ? null : t.User.DisplayName)" SearchFunc="SearchTeachers" Variant="Variant.Outlined" @bind-Value="_thesis.SupervisorSpecialist" />

        <MudText Typo="Typo.h5">@Localizer["DissertationThesisClassification"]</MudText>
        @if (_studyPrograms is not null)
        {
            <MudSelect T="StudyProgram" Required RequiredError="@Localizer["StudyProgramError"]" Label="@Localizer["StudyProgram"]" ToStringFunc="@(sp => sp is null ? null : sp.Name)" Variant="Variant.Outlined" @bind-Value="_thesis.StudyProgram">
                @foreach (var studyProgram in _studyPrograms)
                {
                    <MudSelectItem Value="studyProgram">@studyProgram.Name</MudSelectItem>
                }
            </MudSelect>
        }
        @if (_thesis.StudyProgram is not null)
        {
            <MudField T="string" Label="@Localizer["StudyField"]" Variant="Variant.Outlined">@_thesis.StudyProgram.StudyFieldName</MudField>
        }
        <MudStack Row>
            <MudCheckBox T="bool" @bind-Value="_thesis.DailyStudy">@Localizer["StudyFormDaily"]</MudCheckBox>
            <MudCheckBox T="bool" @bind-Value="_thesis.ExternalStudy">@Localizer["StudyFormExternal"]</MudCheckBox>
        </MudStack>

        @if (_thesis.StudyProgram is not null)
        {
            <MudStack Spacing="0">
                <MudText>Povinné študijné jednotky</MudText>
                @{int index = 1;}
                @foreach (var subject in _thesis.StudyProgram.ThesisSubjects)
                {
                    <MudField T="string" Label="@($"{Localizer["Subject"]} {index}")" Variant="Variant.Outlined">@subject</MudField>
                    index++;
                }
            </MudStack>
        }

        <MudText Typo="Typo.h5">Špecifikácia témy</MudText>
        <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisDescriptionError"]" Label="@Localizer["DissertationThesisDescription"]" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.Description" />
        @if (_isEnglish)
        {
            <MudTextField T="string" Label="Detailed problem description" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.DescriptionEnglish" />
        }
        <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisScientificContributionError"]" Label="@Localizer["DissertationThesisScientificContribution"]" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificContribution" />
        <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisScientificProgressError"]" Label="@Localizer["DissertationThesisScientificProgress"]" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificProgress" />

        <MudText Typo="Typo.h5">@Localizer["MoreInformations"]</MudText>
        <MudStack>
            <MudSelect T="string" Required RequiredError="@Localizer["ResearchTypeError"]" Label="@Localizer["ResearchType"]" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchType">
                <MudSelectItem T="string" Value="@("Aplikovaný výskum a experimentálny vývoj")">@Localizer["ResearchTypeAppliedExperimental"]</MudSelectItem>
                <MudSelectItem T="string" Value="@("Aplikovaný výskum")">@Localizer["ResearchTypeApplied"]</MudSelectItem>
                <MudSelectItem T="string" Value="@("Základný výskum")">@Localizer["ResearchTypeBasic"]</MudSelectItem>
            </MudSelect>
            <MudText>@Localizer["ResearchTypeInfo"]</MudText>
        </MudStack>
        <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisResearchTaskError"]" Label="@Localizer["DissertationThesisResearchTask"]" AutoGrow Lines="4" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchTask" />
        <MudStack>
            <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisSolutionResultsError"]" Label="@Localizer["DissertationThesisSolutionResults"]" AutoGrow Lines="6" Variant="Variant.Outlined" @bind-Value="_thesis.SolutionResults" />
            <MudText>@Localizer["DissertationThesisSolutionResultsInfo"]</MudText>
        </MudStack>

        <MudButton class="mt-4" OnClick="HandleThesis" Variant="Variant.Filled" Color="Color.Primary">@(ThesisGuid is null ? Localizer["Add"] : Localizer["Edit"])</MudButton>
    </MudForm>
}
else
{
    <MudText Typo="Typo.h5" Color="Color.Error">@Localizer["SystemClosedError"]</MudText>
}

@code {
    [Parameter]
    public string? ThesisGuid { get; set; }

    private string? _currentUserRole;
    private string? _currentUserId;

    private MudForm? _form;

    private SystemState? _systemState;
    private IEnumerable<Teacher>? _teachers;
    private IEnumerable<StudyProgram>? _studyPrograms;

    private Thesis _thesis = new();
    private bool _isEnglish = false;

    protected override async Task OnInitializedAsync()
    {
        _currentUserRole = await UsersService.GetCurrentUserRoleAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();

        if (ThesisGuid is not null)
        {
            var thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
            if (thesis is null)
            {
                NavigationManager.NavigateTo("/notfound");
                return;
            }

            _thesis = thesis;
            _isEnglish = _thesis?.TitleEnglish is not null;
        }
        else
        {
            _thesis.SchoolYear = SchoolYearService.CurrentSchoolYear;
        }

        _teachers = await UnitOfWork.Teachers.GetAllAsync();
        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
        _systemState = await UnitOfWork.SystemState.GetAsync();

        if (_currentUserRole == Teacher.Role)
        {
            _teachers = _teachers?.Where(t => t.User.Id == _currentUserId);
        }
    }

    private Task<IEnumerable<Teacher>> SearchTeachers(string search, CancellationToken token)
    {
        if (_teachers is null) return Task.FromResult(Enumerable.Empty<Teacher>());

        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(_teachers);

        return Task.FromResult(_teachers.Where(t => t.User.UserName is not null && t.User.UserName.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task HandleThesis()
    {
        if (_form is null) return;

        await _form.Validate();
        if (_form.IsValid)
        {
            if (ThesisGuid is null) 
            {
                await UnitOfWork.Theses.AddAsync(_thesis);
            }
            else
            {
                await UnitOfWork.Theses.UpdateAsync(_thesis);
            }
            await UnitOfWork.CompleteAsync();
            NavigationManager.NavigateTo("/management/theses");
        }
    }
}
