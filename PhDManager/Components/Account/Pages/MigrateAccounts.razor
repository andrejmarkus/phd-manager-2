@page "/management/migrate-accounts"

@using LdapForNet
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.DTOs
@using PhDManager.Models.Enums
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IServiceProvider ServiceProvider
@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService

@attribute [Authorize(Roles = $"{Admin.Role}")]

<PageTitle>@Localizer["AccountsMigrate"]</PageTitle>

<MudDataGrid T="UserInfo" Items="@_users" Hover SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">@Localizer["AccountsMigrate"]</MudText>
        <MudSpacer />
        <MudTextField Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.User.UserName" Title="@Localizer["Username"]" />
        <PropertyColumn Property="u => u.User.DisplayName" Title="@Localizer["FullName"]" />
        <PropertyColumn Property="u => u.Role" Title="@Localizer["Role"]" />
        <TemplateColumn Title="@Localizer["UserEdit"]">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="@Localizer["UserMigrate"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.SwapHoriz" OnClick="@(() => MigrateUser(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserInfo" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<UserInfo>? _users;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var usersTask = UsersService.GetAll()?.Where(u => u.IsExternal).Select(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var usersService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await usersService.GetUserRoleAsync(u);
            return new UserInfo(u, role);
        });

        if (usersTask is null) return;

        _users = await Task.WhenAll(usersTask);
    }

    private async Task MigrateUser(UserInfo userInfo)
    {
        var dialog = await DialogService.ShowAsync<AddLdapUserDialog>(Localizer["UserAdd"], new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var entry = result.Data as LdapEntry;

        if (entry is null || userInfo.Role is null) return;

        var newUser = await UsersService.RegisterLdapUserWithoutPasswordAsync(entry, userInfo.Role);
        switch (userInfo.Role)
        {
            case Admin.Role:
                if (userInfo.User.Admin is not null) await UsersService.AddAdminToUser(newUser, userInfo.User.Admin);
                break;
            case Teacher.Role:
                if (userInfo.User.Teacher is not null) await UsersService.AddTeacherToUser(newUser, userInfo.User.Teacher);
                break;
            case Student.Role:
                var student = userInfo.User.Students.FirstOrDefault(s => s.State == StudentState.Study);
                if (student is not null) await UsersService.AddStudentToUser(newUser, student);
                break;
            case External.Role:
                if (userInfo.User.External is not null) await UsersService.AddExternalToUser(newUser, userInfo.User.External);
                break;
        }
        await UsersService.DeleteUserAsync(userInfo.User);
    }

    private Func<UserInfo, bool> _quickFilter => u =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (u.User.UserName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (u.User.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if ($"{u.User.UserName} {u.User.DisplayName}".Contains(_search))
            return true;

        return false;
    };
}
