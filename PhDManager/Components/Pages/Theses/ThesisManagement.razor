@page "/theses/add"
@page "/theses/edit/{ThesisGuid}"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IServiceProvider ServiceProvider
@inject UsersService UsersService
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager;

@attribute [Authorize(Roles = "Teacher, Admin")]

<PageTitle>@(ThesisGuid is null ? "Pridanie dizertačnej témy" : "Úprava dizertačnej témy")</PageTitle>

<MudText Class="mb-5" Typo="Typo.h3">Návrh témy doktorandského štúdia</MudText>

<MudForm @ref="_form">
    <MudText Typo="Typo.h5">Zadanie témy</MudText>
    <MudCheckBox T="bool" @bind-Value="_isEnglish">Je možné vypracovať tému v angličtine?</MudCheckBox>
    <MudTextField T="string" Required RequiredError="Je nutné zadať názov témy!" Label="Názov témy dizertačnej práce" Variant="Variant.Outlined" @bind-Value="_thesis.Title" />
    @if (_isEnglish)
    {
        <MudTextField T="string" Label="Title of the dissertation thesis" Variant="Variant.Outlined" @bind-Value="_thesis.TitleEnglish" />
    }
    <MudAutocomplete T="ApplicationUser" Required RequiredError="Je zvoliť školiteľa!" Label="Školiteľ" ToStringFunc="@(u => u is null ? null : u.DisplayName)" SearchFunc="SearchTeachers" Variant="Variant.Outlined" @bind-Value="_thesis.Supervisor" />

    <MudText Typo="Typo.h5">Zaradenie témy</MudText>
    <MudAutocomplete T="StudyProgram" Required RequiredError="Je nutné zvoliť študijný odbor!" Label="Študijný odbor" ToStringFunc="@(sp => sp is null ? null : sp.Name)" Variant="Variant.Outlined" SearchFunc="SearchStudyPrograms" @bind-Value="_thesis.StudyProgram" />
    <div class="d-flex gap-1">
        <MudCheckBox T="bool" @bind-Value="_thesis.DailyStudy">denná</MudCheckBox>
        <MudCheckBox T="bool" @bind-Value="_thesis.ExternalStudy">externá</MudCheckBox>
    </div>

    <MudText Typo="Typo.h5">Špecifikácia témy</MudText>
    <MudTextField T="string" Required RequiredError="Je nutné zadať opis problému!" Label="Detailnejší opis problému" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.Description" />
    @if (_isEnglish)
    {
        <MudTextField T="string" Label="Detailed description of the problem" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.DescriptionEnglish" />
    }
    <MudTextField T="string" Required RequiredError="Je nutné zadať predpokladaný vedecký prínos!" Label="Predpokladaný vedecký prínos (algoritmy, metodológie, ...)" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificContribution" />
    <MudTextField T="string" Required RequiredError="Je nutné zadať odporúčaný postup vedeckého bádania!" Label="Odporučány postup vedeckého bádania" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificProgress" />

    <MudText Typo="Typo.h5">Ďalšie informácie</MudText>
    <MudSelect T="string" Required RequiredError="Je nutné zvoliť druh výskumu!" Label="Druh výskumu" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchType">
        <MudSelectItem T="string" Value="@("Aplikovaný výskum a experimentálny vývoj")">Aplikovaný výskum a experimentálny vývoj</MudSelectItem>
        <MudSelectItem T="string" Value="@("Aplikovaný výskum")">Aplikovaný výskum</MudSelectItem>
        <MudSelectItem T="string" Value="@("Základný výskum")">Základný výskum</MudSelectItem>
    </MudSelect>
    <MudTextField T="string" Required RequiredError="Je nutné zadať výskumnú úlohu" Label="Výskumná úloha, ktorej súčasťou bude riešená téma" AutoGrow Lines="4" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchTask" />
    <MudTextField T="string" Required RequiredError="Je nutné zadať doterajšie výsledky riešenia na školiacom pracovisku!" Label="Doterajšie výsledky riešenia na školiacom pracovisku, vrátane odkazov na dostupné zdroje" AutoGrow Lines="6" Variant="Variant.Outlined" @bind-Value="_thesis.SolutionResults" />
    <MudButton class="mt-4" OnClick="HandleThesis" Variant="Variant.Filled" Color="Color.Primary">@(ThesisGuid is null ? "Pridať" : "Upraviť")</MudButton>
</MudForm>

@code {
    [Parameter]
    public string? ThesisGuid { get; set; }

    private MudForm? _form;
    private IEnumerable<ApplicationUser> _teachers;
    private IEnumerable<StudyProgram>? _studyPrograms;

    private Thesis _thesis = new();
    private bool _isEnglish = false;

    protected override async Task OnInitializedAsync()
    {
        if (ThesisGuid is not null)
        {
            var thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
            if (thesis is not null)
            {
                _thesis = thesis;
                _isEnglish = _thesis?.TitleEnglish is not null;
            }
        }

        _teachers = await UserManager.Users.ToAsyncEnumerable().WhereAwait(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var usersService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await usersService.GetUserRoleAsync(u);
            return role == "Teacher";
        }).ToArrayAsync();
        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
    }

    private async Task<IEnumerable<ApplicationUser>> SearchTeachers(string search, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(search))
            return _teachers;

        return _teachers.Where(t => t.UserName.Contains(search, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<StudyProgram>> SearchStudyPrograms(string search, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(search))
            return _studyPrograms;

        return _studyPrograms.Where(sp => sp.Name.Contains(search, StringComparison.OrdinalIgnoreCase));
    }

    private async Task HandleThesis()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            if (ThesisGuid is null) 
            {
                await UnitOfWork.Theses.AddAsync(_thesis);
            }
            else
            {
                await UnitOfWork.Theses.UpdateAsync(_thesis.Id, _thesis);
            }
            await UnitOfWork.CompleteAsync();
            NavigationManager.NavigateTo("/theses");
        }
    }
}
