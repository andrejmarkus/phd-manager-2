@page "/theses/add"
@page "/theses/edit/{ThesisGuid}"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IServiceProvider ServiceProvider
@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject UsersService UsersService
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager;

@attribute [Authorize(Roles = "Admin, Učiteľ")]

<PageTitle>@(ThesisGuid is null ? Localizer["DissertationThesisAdd"] : Localizer["DisserationThesisEdit"])</PageTitle>

<MudText Class="mb-5" Typo="Typo.h3">@Localizer["DissertationThesisProposal"]</MudText>

<MudForm @ref="_form">
    <MudText Typo="Typo.h5">@Localizer["DissertationThesisAssignment"]</MudText>
    <MudCheckBox T="bool" @bind-Value="_isEnglish">@Localizer["DissertationThesisEnglish"]</MudCheckBox>
    <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisTitleError"]" Label="@Localizer["DissertationThesisTitle"]" Variant="Variant.Outlined" @bind-Value="_thesis.Title" />
    @if (_isEnglish)
    {
        <MudTextField T="string" Label="Dissertation thesis title" Variant="Variant.Outlined" @bind-Value="_thesis.TitleEnglish" />
    }
    <MudAutocomplete T="ApplicationUser" Required RequiredError="@Localizer["SupervisorError"]" Label="@Localizer["Supervisor"]" ToStringFunc="@(u => u is null ? null : u.DisplayName)" SearchFunc="SearchTeachers" Variant="Variant.Outlined" @bind-Value="_thesis.Supervisor" />

    <MudText Typo="Typo.h5">@Localizer["DissertationThesisClassification"]</MudText>
    <MudAutocomplete T="StudyProgram" Required RequiredError="@Localizer["StudyProgramError"]" Label="@Localizer["StudyProgram"]" ToStringFunc="@(sp => sp is null ? null : sp.Name)" Variant="Variant.Outlined" SearchFunc="SearchStudyPrograms" @bind-Value="_thesis.StudyProgram" />
    @if (_thesis.StudyProgram is not null)
    {
        <MudField T="string" Label="@Localizer["StudyField"]" Variant="Variant.Outlined">@_thesis.StudyProgram.StudyFieldName</MudField>
    }
    <MudStack Row>
        <MudCheckBox T="bool" @bind-Value="_thesis.DailyStudy">@Localizer["StudyFormDaily"]</MudCheckBox>
        <MudCheckBox T="bool" @bind-Value="_thesis.ExternalStudy">@Localizer["StudyFormExternal"]</MudCheckBox>
    </MudStack>
    <MudStack Spacing="0">
        <MudText>Povinné študijné jednotky</MudText>
        <MudTextField T="string" Variant="Variant.Outlined" Label="@($"{Localizer["Subject"]} 1")" @bind-Value="@_thesis.SubjectNames[0]" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="@($"{Localizer["Subject"]} 2")" @bind-Value="@_thesis.SubjectNames[1]" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="@($"{Localizer["Subject"]} 3")" @bind-Value="@_thesis.SubjectNames[2]" />
    </MudStack>

    <MudText Typo="Typo.h5">Špecifikácia témy</MudText>
    <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisDescriptionError"]" Label="@Localizer["DissertationThesisDescription"]" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.Description" />
    @if (_isEnglish)
    {
        <MudTextField T="string" Label="Detailed problem description" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.DescriptionEnglish" />
    }
    <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisScientificContributionError"]" Label="@Localizer["DissertationThesisScientificContribution"]" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificContribution" />
    <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisScientificProgressError"]" Label="@Localizer["DissertationThesisScientificProgress"]" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificProgress" />

    <MudText Typo="Typo.h5">@Localizer["MoreInformations"]</MudText>
    <MudStack>
        <MudSelect T="string" Required RequiredError="@Localizer["ResearchTypeError"]" Label="@Localizer["ResearchType"]" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchType">
            <MudSelectItem T="string" Value="@("Aplikovaný výskum a experimentálny vývoj")">@Localizer["ResearchTypeAppliedExperimental"]</MudSelectItem>
            <MudSelectItem T="string" Value="@("Aplikovaný výskum")">@Localizer["ResearchTypeApplied"]</MudSelectItem>
            <MudSelectItem T="string" Value="@("Základný výskum")">@Localizer["ResearchTypeBasic"]</MudSelectItem>
        </MudSelect>
        <MudText>@Localizer["ResearchTypeInfo"]</MudText>
    </MudStack>
    <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisResearchTaskError"]" Label="@Localizer["DissertationThesisResearchTask"]" AutoGrow Lines="4" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchTask" />
    <MudStack>
        <MudTextField T="string" Required RequiredError="@Localizer["DissertationThesisSolutionResultsError"]" Label="@Localizer["DissertationThesisSolutionResults"]" AutoGrow Lines="6" Variant="Variant.Outlined" @bind-Value="_thesis.SolutionResults" />
        <MudText>@Localizer["DissertationThesisSolutionResultsInfo"]</MudText>
    </MudStack>
    <MudButton class="mt-4" OnClick="HandleThesis" Variant="Variant.Filled" Color="Color.Primary">@(ThesisGuid is null ? Localizer["Add"] : Localizer["Edit"])</MudButton>
</MudForm>

@code {
    [Parameter]
    public string? ThesisGuid { get; set; }

    private MudForm? _form;

    private IEnumerable<ApplicationUser>? _teachers;
    private IEnumerable<StudyProgram>? _studyPrograms;

    private Thesis _thesis = new() { SubjectNames = new List<string> { "", "", "" } };
    private bool _isEnglish = false;

    protected override async Task OnInitializedAsync()
    {
        if (ThesisGuid is not null)
        {
            var thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
            if (thesis is null)
            {
                NavigationManager.NavigateTo("/notfound");
                return;
            }

            _thesis = thesis;
            _isEnglish = _thesis?.TitleEnglish is not null;
        }

        _teachers = await UserManager.Users.ToAsyncEnumerable().WhereAwait(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var usersService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await usersService.GetUserRoleAsync(u);
            return role == "Učiteľ";
        }).ToArrayAsync();

        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
    }

    private Task<IEnumerable<ApplicationUser>> SearchTeachers(string search, CancellationToken token)
    {
        if (_teachers is null) return Task.FromResult(Enumerable.Empty<ApplicationUser>());

        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(_teachers);

        return Task.FromResult(_teachers.Where(t => t.UserName is not null && t.UserName.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private Task<IEnumerable<StudyProgram>> SearchStudyPrograms(string search, CancellationToken token)
    {
        if (_studyPrograms is null) return Task.FromResult(Enumerable.Empty<StudyProgram>());

        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(_studyPrograms);

        return Task.FromResult(_studyPrograms.Where(sp => sp.Name.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task HandleThesis()
    {
        if (_form is null) return;

        if (_form.IsValid)
        {
            if (ThesisGuid is null) 
            {
                await UnitOfWork.Theses.AddAsync(_thesis);
            }
            else
            {
                await UnitOfWork.Theses.UpdateAsync(_thesis.Id, _thesis);
            }
            await UnitOfWork.CompleteAsync();
            NavigationManager.NavigateTo("/theses");
        }
    }
}
