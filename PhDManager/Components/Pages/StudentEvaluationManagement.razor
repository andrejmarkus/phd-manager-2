@page "/management/evaluations/add"
@page "/management/evaluations/edit/{StudentEvaluationGuid}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models.Documents
@using PhDManager.Models.Enums
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject NavigationManager NavigationManager
@inject EnumService EnumService
@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}, {ExternalTeacher.Role}")]

<PageTitle>@Localizer["StudentEvaluation"]</PageTitle>

<MudText Typo="Typo.h4">@Localizer["StudentEvaluation"]</MudText>

<MudForm @ref="_form">
    <MudAutocomplete Clearable ReadOnly="@(StudentEvaluationGuid is not null)" T="Student" Required RequiredError="@Localizer["Required"]" Label="@Localizer["Student"]" ToStringFunc="@(s => s?.User.DisplayName)" SearchFunc="SearchStudents" Variant="Variant.Outlined" @bind-Value="@_studentEvaluation.Student" />
    @if (_studentEvaluation.Student is { IndividualPlan: not null, Thesis: not null })
    {
        <MudField Label="@Localizer["StudyForm"]" Variant="Variant.Outlined">@(EnumService.GetLocalizedEnumValue(_studentEvaluation.Student.StudyForm))</MudField>
        <MudField Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined">@_studentEvaluation.Student.StudyProgram?.Name</MudField>
        <MudField Label="@Localizer["StudyField"]" Variant="Variant.Outlined">@_studentEvaluation.Student.StudyProgram?.StudyFieldName</MudField>
        <MudField Label="@Localizer["Department"]" Variant="Variant.Outlined">@_studentEvaluation.Student.Department?.Name</MudField>
        <MudField Label="@Localizer["Supervisor"]" Variant="Variant.Outlined">@_studentEvaluation.Student.Thesis?.Supervisor.User.DisplayName</MudField>
        <MudDatePicker ReadOnly Label="@Localizer["IndividualPlanStudyStartDate"]" Variant="Variant.Outlined" @bind-Date="_studentEvaluation.Student.IndividualPlan.StudyStartDate" />

        <MudDivider Class="my-3" />
        <MudText Typo="Typo.h6">@Localizer["DissertationExam"]</MudText>
        <MudText>@Localizer["StudentEvaluationSubjects"]</MudText>
        <MudGrid Spacing="3">
            @foreach (var subject in _studentEvaluation.Student.IndividualPlan!.Subjects.Select((e, i) => new { Element = e, Index = i }))
            {
                <MudItem xs="9" md="11">
                    <MudField Label="@($"{Localizer["Subject"]} {subject.Index + 1}")" Variant="Variant.Outlined">@subject.Element.Name</MudField>
                </MudItem>
                <MudItem xs="3" md="1">
                    <MudField Label="@($"{Localizer["Grade"]} {subject.Index + 1}")" Variant="Variant.Outlined">@_studentEvaluation.Student.IndividualPlan.IndividualPlanSubjects[subject.Index].Grade</MudField>
                </MudItem>
            }
        </MudGrid>
        <MudText Class="mt-2">@Localizer["ExamApplicationWrittenThesisTitle"]</MudText>
        <MudField Label="@Localizer["ExamApplicationWrittenThesisTitle"]" Variant="Variant.Outlined">@_studentEvaluation.Student.IndividualPlan.WrittenThesisTitle</MudField>
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <MudText Class="d-flex align-center mud-height-full">@Localizer["IndividualPlanDissertationSubmissionDate"]</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["Required"]" Label="@Localizer["PlannedDeadline"]" Variant="Variant.Outlined" @bind-Date="_studentEvaluation.PlannedDissertationSubmissionDate" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker ShowToolbar="false" ReadOnly Label="@Localizer["RealDeadline"]" Variant="Variant.Outlined" @bind-Date="_studentEvaluation.Student.IndividualPlan.DissertationSubmissionDate" />
            </MudItem>
            <MudItem xs="12">
                <MudText Class="d-flex align-center mud-height-full">@Localizer["ExamDate"]</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["Required"]" Label="@Localizer["PlannedDeadline"]" Variant="Variant.Outlined" @bind-Date="_studentEvaluation.PlannedDissertationExamDate" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker ShowToolbar="false" ReadOnly Label="@Localizer["RealDeadline"]" Variant="Variant.Outlined" @bind-Date="_studentEvaluation.Student.DissertationExamDate" />
            </MudItem>
            <MudItem xs="12">
                <MudText Class="d-flex align-center mud-height-full">@Localizer["ExamResult"]</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudField Label="@Localizer["Result"]" Variant="Variant.Outlined">@_studentEvaluation.Student.DissertationExamResult</MudField>
            </MudItem>
            <MudItem xs="6">
                <MudField Label="@Localizer["Transcript"]" Variant="Variant.Outlined">@_studentEvaluation.Student.DissertationExamTranscript</MudField>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-3" />
        <MudText Typo="Typo.h6">@Localizer["DissertationThesis"]</MudText>
        <MudField Label="@Localizer["DissertationThesis"]" Variant="Variant.Outlined">@_studentEvaluation.Student.Thesis.Title</MudField>
        <MudTextField Class="break-lines" T="string" Required RequiredError="@Localizer["Required"]" Label="@Localizer["ThesisState"]" Variant="Variant.Outlined" AutoGrow Lines="3" @bind-Value="_studentEvaluation.ThesisState" />
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <MudText Class="d-flex align-center mud-height-full">@Localizer["DefenceApplicationDate"]</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["Required"]" Label="@Localizer["PlannedDeadline"]" Variant="Variant.Outlined" @bind-Date="_studentEvaluation.PlannedDissertationApplicationDate" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker ShowToolbar="false" ReadOnly Label="@Localizer["RealDeadline"]" Variant="Variant.Outlined" @bind-Date="_studentEvaluation.Student.IndividualPlan.DissertationApplicationDate" />
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-3" />
        <MudText Typo="Typo.h6">@Localizer["StudentEvaluationSupervisorEvaluation"]</MudText>
        <MudTextField Class="break-lines" T="string" Required RequiredError="@Localizer["Required"]" Label="@Localizer["StudentEvaluationCreditsEvaluation"]" Variant="Variant.Outlined" AutoGrow Lines="3" @bind-Value="_studentEvaluation.CreditsEvaluation" />
        <MudTextField Class="break-lines" T="string" Required RequiredError="@Localizer["Required"]" Label="@Localizer["StudentEvaluationScientificEvaluation"]" Variant="Variant.Outlined" AutoGrow Lines="3" @bind-Value="_studentEvaluation.ScientificEvaluation" />
        <MudTextField Class="break-lines" T="string" Required RequiredError="@Localizer["Required"]" Label="@Localizer["StudentEvaluationAssignmentsState"]" Variant="Variant.Outlined" AutoGrow Lines="3" @bind-Value="_studentEvaluation.AssignmentsState" />
        <MudTextField Class="break-lines" T="string" Required RequiredError="@Localizer["Required"]" Label="@Localizer["StudentEvaluationModificationProposal"]" Variant="Variant.Outlined" AutoGrow Lines="3" @bind-Value="_studentEvaluation.ModificationProposal" />
        <MudSelect T="Conclusion" Required RequiredError="@Localizer["Required"]" Label="@Localizer["StudentEvaluationConclusion"]" Variant="Variant.Outlined" @bind-Value="_studentEvaluation.Conclusion">
            @foreach (var conclusion in EnumService.GetLocalizedEnumValues<Conclusion>())
            {
                <MudSelectItem Value="@conclusion.Item1">@conclusion.Item2</MudSelectItem>
            }
        </MudSelect>
        <MudTextField Class="break-lines" T="string" Required RequiredError="@Localizer["Required"]" Label="@Localizer["StudentEvaluationAdditionalEvaluation"]" Variant="Variant.Outlined" AutoGrow Lines="3" @bind-Value="_studentEvaluation.AdditionalEvaluation" />

        <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleStudentEvaluation">@(StudentEvaluationGuid is null ? Localizer["Add"] : Localizer["Edit"])</MudButton>
    }
</MudForm>

@code {
    [Parameter]
    public string? StudentEvaluationGuid { get; set; }

    private MudForm _form = null!;
    private IEnumerable<Student>? _students;

    private StudentEvaluation _studentEvaluation = new();

    protected override async Task OnInitializedAsync()
    {
        _students = await UnitOfWork.Students.GetAllAsync();

        if (StudentEvaluationGuid is not null)
        {
            var studentEvaluation = await UnitOfWork.StudentEvaluations.GetByGuidAsync(StudentEvaluationGuid);
            if (studentEvaluation is not null)
            {
                _studentEvaluation = studentEvaluation;
            }
        }
    }

    private Task<IEnumerable<Student>?> SearchStudents(string search, CancellationToken token)
    {
        var students = _students?.Where(s => s.IndividualPlan is not null);
        return Task.FromResult(string.IsNullOrWhiteSpace(search) ? students : students?.Where(s => s.User.DisplayName is not null && s.User.DisplayName.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task HandleStudentEvaluation()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        _studentEvaluation.PlannedDissertationExamDate = _studentEvaluation.PlannedDissertationExamDate?.ToUniversalTime();
        _studentEvaluation.PlannedDissertationSubmissionDate = _studentEvaluation.PlannedDissertationSubmissionDate?.ToUniversalTime();
        _studentEvaluation.PlannedDissertationApplicationDate = _studentEvaluation.PlannedDissertationApplicationDate?.ToUniversalTime();

        _studentEvaluation.CurrentDate = DateTime.UtcNow;

        if (StudentEvaluationGuid is null)
        {
            _studentEvaluation.SchoolYear = SchoolYearService.Instance.CurrentSchoolYear;
            await UnitOfWork.StudentEvaluations.AddAsync(_studentEvaluation);
        }
        else
        {
            await UnitOfWork.StudentEvaluations.UpdateAsync(_studentEvaluation);
        }

        await UnitOfWork.CompleteAsync();
        NavigationManager.NavigateTo("/management/evaluations");
    }
}
