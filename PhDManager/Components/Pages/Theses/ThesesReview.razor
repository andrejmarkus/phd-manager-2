@page "/theses/review"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}, {External.Role}")]

<PageTitle>@Localizer["DissertationThesisPending"]</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["DissertationThesisPending"]</MudText>

<MudGrid>
    @if (_theses is not null)
    {
        @foreach (var thesis in _theses)
        {
            <MudItem xs="6" md="4" lg="3">
                <MudPaper Class="pa-2">
                    <MudLink Color="Color.Default" Underline="Underline.None" Href="@($"/theses/{thesis.Guid}")">
                        <MudText Typo="Typo.h6">@thesis.Title</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["Supervisor"]: </b> @thesis.Supervisor.User.DisplayName</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["StudyProgram"]: </b> @thesis.StudyProgram.Name</MudText>
                        <MudText Typo="Typo.body2">
                            <b>@Localizer["StudyForm"]: </b>
                            @if (thesis.DailyStudy)
                            {
                                <span>@Localizer["StudyFormDaily"]</span>
                            }
                            @if (thesis.DailyStudy && thesis.ExternalStudy)
                            {
                                <span>, </span>
                            }
                            @if (thesis.ExternalStudy)
                            {
                                <span>@Localizer["StudyFormExternal"]</span>
                            }
                        </MudText>
                    </MudLink>
                    <AuthorizeView Roles="@($"{Admin.Role}, {External.Role}")">
                        <Authorized>
                            <MudStack Row Class="mt-2">
                                <MudIconButton Size="@Size.Small" Color="Color.Primary" Icon="@Icons.Material.Outlined.Check" OnClick="@(() => AcceptThesis(thesis))" />
                                <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteThesis(thesis))" />
                            </MudStack>
                        </Authorized>
                    </AuthorizeView>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private IEnumerable<Thesis>? _theses;

    protected override async Task OnInitializedAsync()
    {
        var allTheses = await UnitOfWork.Theses.GetAllAsync();

        _theses = allTheses?.Where(t => !t.IsApproved).ToArray();
    }

    private async Task AcceptThesis(Thesis thesis)
    {
        thesis.IsApproved = true;
        foreach (var comment in thesis.Comments)
        {
            UnitOfWork.Comments.Delete(comment);
        }
        await UnitOfWork.Theses.UpdateAsync(thesis);
        await UnitOfWork.CompleteAsync();
        _theses = _theses?.Where(t => t.Id != thesis.Id);
    }

    private async Task DeleteThesis(Thesis thesis)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["DissertationThesisDelete"], Localizer["DissertationThesisDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        foreach (var comment in thesis.Comments)
        {
            UnitOfWork.Comments.Delete(comment);
        }
        UnitOfWork.Theses.Delete(thesis);
        await UnitOfWork.CompleteAsync();
        _theses = _theses?.Where(t => t.Id != thesis.Id);
    }
}
