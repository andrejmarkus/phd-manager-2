@page "/theses/{ThesisGuid}"

@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IUnitOfWork UnitOfWork
@inject UserManager<ApplicationUser> UserManager
@inject UsersService UsersService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Thesis</PageTitle>

@if (_thesis is not null)
{
    <MudText Align="Align.Center" Typo="Typo.h4">@_thesis.Title</MudText>
    <MudPaper Class="pa-2">
        <MudStack Spacing="5">
            @if (_thesis.TitleEnglish is not null)
            {
                <div>
                    <MudText Typo="Typo.h6">Title of the dissertation thesis</MudText>
                    <MudText Typo="Typo.body1">@_thesis.TitleEnglish</MudText>
                </div>
            }
            <div>
                <MudText Typo="Typo.h6">Školiteľ</MudText>
                <MudText Typo="Typo.body1">@_thesis.Supervisor.DisplayName</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h6">Študijný odbor</MudText>
                <MudText Typo="Typo.body1">@_thesis.StudyProgram.Name</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h6">Detailnejší opis problému</MudText>
                <MudText Typo="Typo.body1">@_thesis.Description</MudText>
            </div>
            @if (_thesis.DescriptionEnglish is not null)
            {
                <div>
                    <MudText Typo="Typo.h6">Detailed description of the problem</MudText>
                    <MudText Typo="Typo.body1">@_thesis.DescriptionEnglish</MudText>
                </div>
            }
            <div>
                <MudText Typo="Typo.h6">Predpokladaný vedecký prínos</MudText>
                <MudText Typo="Typo.body1">@_thesis.ScientificContribution</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h6">Odporučány postup vedeckého bádania</MudText>
                <MudText Typo="Typo.body1">@_thesis.ScientificProgress</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h6">Druh výskumu</MudText>
                <MudText Typo="Typo.body1">@_thesis.ResearchType</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h6">Výskumná úloha, ktorej súčasťou bude riešená téma</MudText>
                <MudText Typo="Typo.body1">@_thesis.ResearchTask</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h6">Doterajšie výsledky riešenia na školiacom pracovisku, vrátane odkazov na dostupné zdroje</MudText>
                <MudText Typo="Typo.body1">@_thesis.SolutionResults</MudText>
            </div>
            <AuthorizeView Roles="Admin, Teacher">
                <Authorized>
                    <div class="d-flex gap-1">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/edit/{_thesis.Guid}")">Uprav</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteThesis(_thesis))">Vymaž</MudButton>
                    </div>
                </Authorized>
            </AuthorizeView>
        </MudStack>
    </MudPaper>
    @if (!_thesis.IsApproved)
    {
        <AuthorizeView Roles="Admin, Teacher, Reviewer">
            <Authorized>
                <MudStack Class="mt-5">
                    <MudText Typo="Typo.h6">Komentáre</MudText>
                    @if (_thesis.Comments?.Count() > 0) {
                        @foreach (var comment in _thesis.Comments)
                        {
                            <MudPaper Class="pa-2">
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <div>
                                        <MudText Typo="Typo.h6">@comment.Reviewer.DisplayName</MudText>
                                        <MudText Typo="Typo.body1">@comment.Text</MudText>
                                    </div>
                                    <AuthorizeView Roles="Admin" Context="editContext">
                                        <Authorized>
                                            <div>
                                                <MudIconButton Size="@Size.Medium" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteComment(comment))" />
                                                <MudIconButton Size="@Size.Medium" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateComment(comment))" />
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="Reviewer" Context="editContext">
                                        <Authorized>
                                            @if (_currentUserId?.Equals(comment.ReviewerId) == true)
                                            {
                                                <div>
                                                    <MudIconButton Size="@Size.Medium" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteComment(comment))" />
                                                    <MudIconButton Size="@Size.Medium" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateComment(comment))" />
                                                </div>
                                            }
                                        </Authorized>
                                    </AuthorizeView>
                                </MudStack>
                            </MudPaper>
                        }
                    }
                    <AuthorizeView Roles="Reviewer" Context="reviewerContext">
                        <Authorized>
                            <MudTextField @bind-Value="_commentText" Label="Komentár" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="PostComment"></MudTextField>
                        </Authorized>
                    </AuthorizeView>
                </MudStack>
            </Authorized>
        </AuthorizeView>
    }
}

@code {
    [Parameter]
    public string ThesisGuid { get; set; }

    private Thesis _thesis;
    private string? _currentUserId;

    private string _commentText;

    protected override async Task OnInitializedAsync()
    {
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
        _currentUserId = await UsersService.GetCurrentUserIdAsync();
    }

    private async Task UpdateComment(Comment comment)
    {
        var parameters = new DialogParameters<EditCommentDialog> { { x => x.Comment, comment } };
        var dialog = await DialogService.ShowAsync<EditCommentDialog>("Edit Comment", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            var updatedComment = result.Data as Comment;
            await UnitOfWork.Comments.UpdateAsync(updatedComment.Id, updatedComment);
            await UnitOfWork.CompleteAsync();
            _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
        }
    }

    private async Task PostComment()
    {
        Comment comment = new Comment
        {
            Text = _commentText,
            ThesisId = _thesis.Id,
            ReviewerId = await UsersService.GetCurrentUserIdAsync()
        };
        await UnitOfWork.Comments.AddAsync(comment);
        await UnitOfWork.CompleteAsync();
        _commentText = string.Empty;
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
    }

    private async Task DeleteThesis(Thesis thesis)
    {
        if (thesis.IndividualPlan is not null)
        {
            await UnitOfWork.IndividualPlans.DeleteAsync(thesis.IndividualPlan.Id);
        }
        await UnitOfWork.Theses.DeleteAsync(thesis.Id);
        await UnitOfWork.CompleteAsync();
        NavigationManager.NavigateTo("/theses");
    }

    private async Task DeleteComment(Comment comment)
    {
        await UnitOfWork.Comments.DeleteAsync(comment.Id);
        await UnitOfWork.CompleteAsync();
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
    }

}