@page "/management/dissertation-defense-supervisors/add"
@page "/management/dissertation-defense-supervisors/edit/{DissertationDefenseSupervisorGuid}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Enums
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject NavigationManager NavigationManager
@inject UsersService UsersService
@inject EnumService EnumService
@inject SchoolYearService SchoolYearService

@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}, {ExternalTeacher.Role}")]

<PageTitle>@Localizer["DissertationDefenseSupervisorTitle"]</PageTitle>

<MudText Typo="Typo.h3">@Localizer["DissertationDefenseSupervisorTitle"]</MudText>

<MudForm @ref="_form">
    <MudAutocomplete ReadOnly="@(DissertationDefenseSupervisorGuid is not null)" T="Student" Required RequiredError="@Localizer["Required"]" Label="@Localizer["Student"]" ToStringFunc="@(s => s is null ? null : s.User.DisplayName)" SearchFunc="SearchStudents" Variant="Variant.Outlined" @bind-Value="@_dissertationDefenseSupervisor.Student" />
    @if (_dissertationDefenseSupervisor.Student is not null)
    {
        <MudField T="string" Label="@Localizer["StudyForm"]" Variant="Variant.Outlined">@(EnumService.GetLocalizedEnumValue(_dissertationDefenseSupervisor.Student.StudyForm))</MudField>
        <MudField T="string" Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined">@_dissertationDefenseSupervisor.Student.StudyProgram?.Name</MudField>
        <MudField T="string" Label="@Localizer["StudyField"]" Variant="Variant.Outlined">@_dissertationDefenseSupervisor.Student.StudyProgram?.StudyFieldName</MudField>
        <MudField T="string" Label="@Localizer["Department"]" Variant="Variant.Outlined">@_dissertationDefenseSupervisor.Student.Department?.Name</MudField>
        <MudField T="string" Label="@Localizer["Supervisor"]" Variant="Variant.Outlined">@_dissertationDefenseSupervisor.Student.Thesis?.Supervisor.User.DisplayName</MudField>
        <MudDatePicker ReadOnly Label="@Localizer["IndividualPlanStudyStartDate"]" Variant="Variant.Outlined" @bind-Date="_dissertationDefenseSupervisor.Student.IndividualPlan!.StudyStartDate" />
        <MudDatePicker ReadOnly Label="@Localizer["StudyCompletionExpectedDate"]" Variant="Variant.Outlined" @bind-Date="_dissertationDefenseSupervisor.Student.IndividualPlan!.StudyEndDate" />
        <MudTextField T="int" Required RequiredError="@Localizer["Required"]" Label="@Localizer["ApplicationSubmissionCreditsNumber"]" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.CreditsCount" />
        <MudTextField T="int" Required RequiredError="@Localizer["Required"]" Label="@Localizer["ApplicationSubmissionYear"]" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.ApplicationYear" />
        <MudField Label="@Localizer["DissertationTopic"]" Variant="Variant.Outlined">@_dissertationDefenseSupervisor.Student.Thesis?.Title</MudField>
    }

    <MudText Typo="Typo.h6">@Localizer["DissertationOpponents"]:</MudText>
    <ul class="ml-4">
        <li><MudText>@Localizer["DissertationOpponentsInfo1"]</MudText></li>
        <li><MudText>@Localizer["DissertationOpponentsInfo2"]</MudText></li>
        <li><MudText>@Localizer["DissertationOpponentsInfo3"]</MudText></li>
        <li><MudText>@Localizer["DissertationOpponentsInfo4"]</MudText></li>
    </ul>

    @if (_dissertationDefenseSupervisor.OpponentDisplayNames.Length > 0)
    {
        <MudStack Class="mt-4">
            <MudStack Spacing="0">
                <MudText>@Localizer["DissertationDefenseSupervisorOpponent1"]</MudText>
                <MudTextField Label="@Localizer["NameAndTitles"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentDisplayNames[0]" />
                <MudTextField Label="@Localizer["WorkplaceAddress"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentWorkplaceAddresses[0]" />
                <MudTextField Label="@Localizer["PhoneNumber"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentPhoneNumbers[0]" />
                <MudTextField Label="@Localizer["Email"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentEmails[0]" />
            </MudStack>
            <MudStack Spacing="0">
                <MudText>@Localizer["DissertationDefenseSupervisorOpponent2"]</MudText>
                <MudTextField Label="@Localizer["NameAndTitles"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentDisplayNames[1]" />
                <MudTextField Label="@Localizer["WorkplaceAddress"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentWorkplaceAddresses[1]" />
                <MudTextField Label="@Localizer["PhoneNumber"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentPhoneNumbers[1]" />
                <MudTextField Label="@Localizer["Email"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentEmails[1]" />
            </MudStack>
            <MudStack Spacing="0">
                <MudText>@Localizer["DissertationDefenseSupervisorOpponent3"]</MudText>
                <MudTextField Label="@Localizer["NameAndTitles"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentDisplayNames[2]" />
                <MudTextField Label="@Localizer["WorkplaceAddress"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentWorkplaceAddresses[2]" />
                <MudTextField Label="@Localizer["PhoneNumber"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentPhoneNumbers[2]" />
                <MudTextField Label="@Localizer["Email"]" T="string" Variant="Variant.Outlined" @bind-Value="_dissertationDefenseSupervisor.OpponentEmails[2]" />
            </MudStack>
        </MudStack>
    }

    <MudButton class="mt-4" OnClick="HandleDissertationDefenseSupervisor" Variant="Variant.Filled" Color="Color.Primary">@(DissertationDefenseSupervisorGuid is null ? Localizer["Add"] : Localizer["Edit"])</MudButton>
</MudForm>

@code {
    [Parameter]
    public string? DissertationDefenseSupervisorGuid { get; set; }

    private string? _currentUserRole;
    private string? _currentUserId;

    private MudForm _form = default!;
    private IEnumerable<Student>? _students;

    private DissertationDefenseSupervisor _dissertationDefenseSupervisor = new();

    protected override async Task OnInitializedAsync()
    {
        _currentUserRole = await UsersService.GetCurrentUserRoleAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();

        if (DissertationDefenseSupervisorGuid is not null)
        {
            var dissertationDefenseSupervisor = await UnitOfWork.DissertationDefenseSupervisors.GetByGuidAsync(DissertationDefenseSupervisorGuid);
            if (dissertationDefenseSupervisor is not null)
            {
                _dissertationDefenseSupervisor = dissertationDefenseSupervisor;
            }
        }
        else
        {
            _dissertationDefenseSupervisor.OpponentDisplayNames = Enumerable.Repeat(string.Empty, 3).ToArray();
            _dissertationDefenseSupervisor.OpponentWorkplaceAddresses = Enumerable.Repeat(string.Empty, 3).ToArray();
            _dissertationDefenseSupervisor.OpponentPhoneNumbers = Enumerable.Repeat(string.Empty, 3).ToArray();
            _dissertationDefenseSupervisor.OpponentEmails = Enumerable.Repeat(string.Empty, 3).ToArray();
        }

        _students = await UnitOfWork.Students.GetAllAsync();

        if (_currentUserRole == Teacher.Role || _currentUserRole == ExternalTeacher.Role)
        {
            _students = _students?.Where(s => s.Thesis?.Supervisor.User.Id == _currentUserId);
        }
    }

    private Task<IEnumerable<Student>?> SearchStudents(string search, CancellationToken token)
    {
        var students = _students?.Where(s => s.IndividualPlan is not null);
        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(students);

        return Task.FromResult(students?.Where(s => s.User.DisplayName is not null && s.User.DisplayName.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task HandleDissertationDefenseSupervisor()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        _dissertationDefenseSupervisor.CurrentDate = DateTime.UtcNow;

        if (DissertationDefenseSupervisorGuid is null)
        {
            await UnitOfWork.DissertationDefenseSupervisors.AddAsync(_dissertationDefenseSupervisor);
        }
        else
        {
            await UnitOfWork.DissertationDefenseSupervisors.UpdateAsync(_dissertationDefenseSupervisor);
        }

        await UnitOfWork.CompleteAsync();
        NavigationManager.NavigateTo("/management/supervisor-documents");
    }
}
