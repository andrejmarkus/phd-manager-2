@page "/admin"

@using LdapForNet
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IServiceProvider ServiceProvider
@inject UsersService UsersService

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Admin</MudText>

<MudDataGrid T="UserInfo" Items="@_users" Hover="true" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" ReadOnly="false" EditMode="DataGridEditMode.Form" CommittedItemChanges="@UpdateUser">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">Users</MudText>
        <MudSpacer />
        <MudTextField Class="mr-4" @bind-Value="_search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _visible = true)">Add user</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.User.UserName" Title="Username" Editable="false" />
        <PropertyColumn Property="u => u.User.DisplayName" Title="Display name" Editable="false" />
        <PropertyColumn Property="u => u.User.Email" Title="Email" Editable="false" />
        <PropertyColumn Property="u => u.User.EmailConfirmed" Title="Email confirmed" Editable="false" />
        <PropertyColumn Property="u => u.Role" Title="Role" Editable="true">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.Role" Required>
                    @foreach (var role in _roles)
                    {
                        <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteUser(context.Item))" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApplicationUser" />
    </PagerContent>
</MudDataGrid>

<AddUsersDialog Visible=_visible />

@code {
    private UserInfo[] _users = { };
    private IdentityRole[] _roles = { };
    private string _search = "";
    private bool _visible = false;

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
            _roles = roleManager.Roles.ToArray();
            _users = await userManager.Users.ToAsyncEnumerable().SelectAwait(async u => new UserInfo(u, await UsersService.GetUserRoleAsync(u))).ToArrayAsync();
        }
    }

    private Func<UserInfo, bool> _quickFilter => u =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (u.User.UserName.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (u.User.Email.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{u.User.UserName} {u.User.Email}".Contains(_search))
            return true;

        return false;
    };

    private async Task UpdateUser(UserInfo userInfo)
    {
        await UsersService.UpdateUserRoleAsync(userInfo.User, userInfo.Role);
    }

    private async Task DeleteUser(UserInfo userInfo)
    {
        await UsersService.DeleteUserAsync(userInfo.User);
    }

    private sealed class UserInfo(ApplicationUser user, string role)
    {
        public ApplicationUser User { get; set; } = user;
        public string Role { get; set; } = role;
    }
}
