@page "/admin/individual-plans/add"
@page "/admin/individual-plans/edit/{IndividualPlanGuid}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IServiceProvider ServiceProvider
@inject IUnitOfWork UnitOfWork
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Vytvorenie individualného plánu</PageTitle>

<MudText Typo="Typo.h3">Individuálny študijný plán doktoranda</MudText>

<MudForm @ref="_form">
    <MudAutocomplete T="ApplicationUser" Required RequiredError="Je nutné zvoliť študenta!" Label="Meno a priezvisko, titul" ToStringFunc="@(s => s is null ? null : s.DisplayName)" SearchFunc="SearchStudents" Variant="Variant.Outlined" @bind-Value="@_selectedStudent" />
    @if (_selectedStudent is not null)
    {
        @if (_selectedStudent.HasInfo)
        {
            <MudDatePicker ShowToolbar="false" Label="Dátum narodenia" Variant="Variant.Outlined" @bind-Date="_selectedStudent.Birthdate" ReadOnly />
            <MudField T="string" Label="Trvalé bydlisko" Variant="Variant.Outlined">@_selectedStudent.Address.FullAddress</MudField>
            <MudField T="string" Label="Telefónne číslo" Variant="Variant.Outlined">@_selectedStudent.PhoneNumber</MudField>
            <MudField T="string" Label="Forma štúdia" Variant="Variant.Outlined">@(_selectedStudent.IsExternal ? "Externá" : "Denná")</MudField>
            <MudField T="string" Label="Študijný program" Variant="Variant.Outlined">@_selectedStudent.StudyProgram.Name</MudField>
            <MudField T="string" Label="Študijný odbor" Variant="Variant.Outlined">@_selectedStudent.StudyProgram.StudyFieldName</MudField>
            <MudDatePicker ShowToolbar="false" Required RequiredError="Je nutné zadať termín nástupu!" Label="Nástup na doktorandské štúdium" Variant="Variant.Outlined" @bind-Date="_individualPlan.StudyStartDate" />
        } 
        else
        {
            <MudText Color="Color.Error">Uživateľ nemá vyplnené profilové informácie!</MudText>
        }
    }

    <MudText Typo="Typo.h5">Termíny</MudText>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">Termín podania žiadosti o dizertačnú skúšku vrátane odovzdania písomnej práce k diz. skúške (zvyčajne prvá polovica septembra v 2. ročníku)</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="Je nutné zadať termín podania žiadosti!" Label="Termín podania žiadosti" Variant="Variant.Outlined" @bind-Date="_individualPlan.DissertationExamDate" />
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">Termín odovzdania dizertačnej práce (zvyčajne apríl v roku ukončenia štúdia)</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="Je nutné zadať termín odovzdania!" Label="Termín odovzdania" Variant="Variant.Outlined" FixDay="1" OpenTo="OpenTo.Month" @bind-Date="_individualPlan.DissertationSubmissionDate" />
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">Termín ukončenia doktorandského štúdia vrátane obhajoby dizertačnej práce (zvyčajne 31.8. po 3 rokoch štúdia interní doktorandi a po 4 rokoch externí doktorandi)</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="Je nutné zadať termín ukončenia štúdia!" Label="Termín ukončenia štúdia" Variant="Variant.Outlined" @bind-Date="_individualPlan.StudyEndDate" />
    </MudStack>

    <MudText Typo="Typo.h4">Študijná časť</MudText>
    <MudText Typo="Typo.h5">Predmety s tématickými okruhmi pre dizertačnú skúšku</MudText>
    <MudAutocomplete T="Subject" Required RequiredError="Je nutné zvoliť predmet!" Label="Predmet 1" ToStringFunc="@(s => s is null ? null : s.Name)" SearchFunc="SearchSubjects" Variant="Variant.Outlined" @bind-Value="_selectedSubjects[0]" />
    <MudAutocomplete T="Subject" Required RequiredError="Je nutné zvoliť predmet!" Label="Predmet 2" ToStringFunc="@(s => s is null ? null : s.Name)" SearchFunc="SearchSubjects" Variant="Variant.Outlined" @bind-Value="_selectedSubjects[1]" />
    <MudAutocomplete T="Subject" Required RequiredError="Je nutné zvoliť predmet!" Label="Predmet 3" ToStringFunc="@(s => s is null ? null : s.Name)" SearchFunc="SearchSubjects" Variant="Variant.Outlined" @bind-Value="_selectedSubjects[2]" />
    <MudText Typo="Typo.h5">Odporučané ďalšie voliteľné predmety</MudText>
    <MudText>To-Do</MudText>
    <MudText Typo="Typo.h5">Téma písomnej časti dizertačnej skúšky</MudText>
    <MudAutocomplete T="Thesis" Required RequiredError="Je nutné zvoliť dizertačnú tému!" Label="Dizertačná téma" ToStringFunc="@(t => t is null ? null : t.Title)" SearchFunc="SearchTheses" Variant="Variant.Outlined" @bind-Value="_selectedThesis" />
    @if (_selectedThesis is not null)
    {
        <MudField T="string" Label="Školitel" Variant="Variant.Outlined">@_selectedThesis.Supervisor.DisplayName</MudField>
    }

    <MudButton class="mt-4" OnClick="HandleIndividualPlan" Variant="Variant.Filled" Color="Color.Primary">@(IndividualPlanGuid is null ? "Pridať" : "Upraviť")</MudButton>
</MudForm>

@code {
    [Parameter]
    public string? IndividualPlanGuid { get; set; }

    private MudForm? _form;
    private IEnumerable<ApplicationUser>? _students;
    private IEnumerable<Thesis>? _theses;
    private IEnumerable<Subject>? _subjects;

    private IndividualPlan _individualPlan = new();
    private ApplicationUser? _selectedStudent;
    private Thesis? _selectedThesis;
    private Subject?[] _selectedSubjects = new Subject[3];

    protected override async Task OnInitializedAsync()
    {
        if (IndividualPlanGuid is not null)
        {
            var individualPlan = await UnitOfWork.IndividualPlans.GetByGuidAsync(IndividualPlanGuid);
            if (individualPlan is not null)
            {
                _individualPlan = individualPlan;
                _selectedStudent = _individualPlan.User;
                _selectedThesis = _individualPlan.Thesis;
                _selectedSubjects = _individualPlan.Subjects.ToArray();
            }
        }
        else
        {
            _individualPlan.StudyStartDate = new DateTime(DateTime.Now.Year, 9, 1);
            _individualPlan.DissertationExamDate = new DateTime(DateTime.Now.Year + 1, 9, 6);
            _individualPlan.DissertationSubmissionDate = new DateTime(DateTime.Now.Year + 3, 4, 1);
            _individualPlan.StudyEndDate = new DateTime(DateTime.Now.Year + 3, 8, 31);
        }

        _students = await UserManager.Users.ToAsyncEnumerable().WhereAwait(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var userService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await userService.GetUserRoleAsync(u);
            return role == "Študent";
        }).ToArrayAsync();
        _theses = await UnitOfWork.Theses.GetAllAsync();
        _subjects = await UnitOfWork.Subjects.GetAllAsync();
    }

    private async Task<IEnumerable<ApplicationUser>?> SearchStudents(string search, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(search))
            return _students?.Where(s => s.IndividualPlan is null);

        return _students?.Where(s => s.IndividualPlan is null).Where(s => s.DisplayName.Contains(search, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<Thesis>> SearchTheses(string search, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(search))
            return _theses.Where(t => t.StudyProgram == _selectedStudent?.StudyProgram);

        return _theses.Where(t => t.StudyProgram == _selectedStudent?.StudyProgram).Where(t => t.Title.Contains(search, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<Subject>> SearchSubjects(string search, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(search))
            return _subjects.Where(t => t.StudyProgram == _selectedStudent?.StudyProgram);

        return _subjects.Where(s => s.StudyProgram == _selectedStudent?.StudyProgram).Where(s => s.Name.Contains(search, StringComparison.OrdinalIgnoreCase));
    }

    private async Task HandleIndividualPlan()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            _individualPlan.StudyStartDate = _individualPlan.StudyStartDate?.ToUniversalTime();
            _individualPlan.DissertationExamDate = _individualPlan.DissertationExamDate?.ToUniversalTime();
            _individualPlan.DissertationSubmissionDate = _individualPlan.DissertationSubmissionDate?.ToUniversalTime();
            _individualPlan.StudyEndDate = _individualPlan.StudyEndDate?.ToUniversalTime();
            _individualPlan.User = _selectedStudent;
            _individualPlan.Thesis = _selectedThesis;
            _individualPlan.Subjects = _selectedSubjects.ToList();
            if (IndividualPlanGuid is null)
            {
                await UnitOfWork.IndividualPlans.AddAsync(_individualPlan);
            }
            else
            {
                await UnitOfWork.IndividualPlans.UpdateAsync(_individualPlan.Id, _individualPlan);
            }
            await UnitOfWork.CompleteAsync();
            NavigationManager.NavigateTo("/admin/individual-plans");
        }
    }
}
