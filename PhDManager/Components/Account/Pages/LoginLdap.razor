@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using LdapForNet
@using static LdapForNet.Native.Native
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using PhDManager.Core.Models
@using PhDManager.Data
@using PhDManager.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IOptions<ActiveDirectoryOptions> ActiveDirectoryOptions
@inject UserManager<ApplicationUser> UserManager
@inject ActiveDirectoryService ActiveDirectoryService
@inject UsersService UsersService

<PageTitle>Log in</PageTitle>

<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
    <MudText Typo="Typo.h3" GutterBottom="true">Log in (LDAP)</MudText>
    <MudImage Class="width-half" Src="fingerprint.svg" />
    <MudStack>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username" 
                        Label="Username" Placeholder="username"
                        UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password" 
                        Label="Password" InputType="InputType.Password" Placeholder="password" 
                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudStack Class="mt-4">
            <MudLink Href="Account/LoginExtern">Are you an extern?</MudLink>
        </MudStack>
    </MudStack>
</MudStack>

@code {

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var entry = await ActiveDirectoryService.AuthenticateUserAsync(Input.Username, Input.Password);
        if (entry is null)
        {
            errorMessage = "Error: Invalid username or password.";
            return;
        }

        var user = await UserManager.FindByNameAsync(Input.Username);
        if (user is null)
        {
            user = await UsersService.RegisterLdapUserAsync(entry, Input.Password);
        } 
        else
        {
            if (user.PasswordHash is null)
            {
                user.PasswordHash = UserManager.PasswordHasher.HashPassword(user, Input.Password);
                await UserManager.UpdateAsync(user);
            }
        }

        await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        Logger.LogInformation("User logged in.");
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
