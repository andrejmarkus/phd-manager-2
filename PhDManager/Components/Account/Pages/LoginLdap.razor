@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using LdapForNet
@using static LdapForNet.Native.Native
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using PhDManager.Core.Models
@using PhDManager.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IOptions<ActiveDirectoryOptions> ActiveDirectoryOptions
@inject IUserStore<ApplicationUser> UserStore
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Log in (LDAP)</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username" 
                        Label="Username" Placeholder="username"
                        UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password" 
                        Label="Password" InputType="InputType.Password" Placeholder="password" 
                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="Account/LoginExtern">Are you an extern?</MudLink><br />
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        IEnumerable<LdapEntry> entries;

        try
        {
            using var connection = new LdapConnection();
            connection.Connect(ActiveDirectoryOptions.Value.LdapPath, 389, LdapSchema.LDAP);
            connection.SetOption(LdapOption.LDAP_OPT_REFERRALS, nint.Zero);
            await connection.BindAsync(LdapAuthType.Simple, new LdapCredential
            {
                UserName = $"{Input.Username}@{ActiveDirectoryOptions.Value.LdapPath}",
                Password = Input.Password
            });
            entries = await connection.SearchAsync(ActiveDirectoryOptions.Value.LdapDomain, $"(uid={Input.Username})");
        } catch (Exception e)
        {
            errorMessage = "Error: Invalid login attempt.";
            Logger.LogError(e, errorMessage);
            return;
        }

        var entry = entries.FirstOrDefault();
        if (entry is null)
        {
            errorMessage = "Error: Invalid login attempt.";
            Logger.LogError("Entry in LDAP wasn't found.");
            return;
        }

        var user = await UserManager.FindByNameAsync(Input.Username);
        if (user is null)
        {
            user = CreateUser();
            var mail = entry.DirectoryAttributes["mail"].GetValue<string>();

            await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, mail, CancellationToken.None);
            user.EmailConfirmed = true;
            var result = await UserManager.CreateAsync(user, Input.Password);
            await UserManager.AddToRoleAsync(user, "User");

            await UserManager.CreateAsync(user);
        }

        await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        Logger.LogInformation("User logged in.");
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
