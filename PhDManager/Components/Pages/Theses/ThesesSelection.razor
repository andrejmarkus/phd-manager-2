@page "/theses"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Theses</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Dizertačné témy</MudText>

<div class="d-flex gap-3">
    <AuthorizeView Roles="Teacher, Admin">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/theses/add">Pridať tému</MudButton>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Teacher, Admin, Reviewer">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/theses/review">Potvrdiť tému</MudButton>
        </Authorized>
    </AuthorizeView>
</div>
<div class="d-flex">
    <MudTextField T="string" @bind-Value="@_search" Label="Vyhľadaj" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="@(() => SearchTheses(_search))" />
</div>
<MudGrid>
    @if (_theses is not null)
    {
        @foreach (var thesis in _theses)
        {
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h6">@thesis.Title</MudText>
                    <MudText Typo="Typo.body2">@thesis.Description</MudText>
                    <div class="d-flex justify-space-between mt-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/{thesis.Guid}")">Detail</MudButton>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <div class="d-flex gap-1">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/{thesis.Guid}/edit")">Uprav</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteThesis(thesis.Id))">Vymaž</MudButton>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                        <AuthorizeView Roles="Teacher">
                            <Authorized>
                                @if (_currentUserId?.Equals(thesis.SupervisorId) == true)
                                {
                                    <div class="d-flex gap-1">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/{thesis.Guid}/edit")">Uprav</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteThesis(thesis.Id))">Vymaž</MudButton>
                                    </div>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private IEnumerable<Thesis>? _theses;
    private string? _currentUserId;

    private string _search;

    protected override async Task OnInitializedAsync()
    {
        _theses = (await UnitOfWork.Theses.GetAllAsync()).Where(t => t.IsApproved).ToArray();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();
    }

    private async Task DeleteThesis(int id)
    {
        await UnitOfWork.Theses.DeleteAsync(id);
        await UnitOfWork.CompleteAsync();
        _theses = _theses?.Where(t => t.Id != id);
    }

    private async Task SearchTheses(string search)
    {
        _theses = (await UnitOfWork.Theses.GetAllAsync()).Where(t => t.IsApproved).Where(t => t.Title.Contains(search) || t.TitleEnglish?.Contains(search) == true).ToArray();
    }
}
