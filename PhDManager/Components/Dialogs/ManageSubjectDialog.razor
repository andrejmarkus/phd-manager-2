@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Enums
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject EnumService EnumService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(_add ? Localizer["SubjectAdd"] : Localizer["SubjectEdit"])</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            @if (Subject is not null)
            {
                <MudTextField Label="@Localizer["SubjectName"]" Variant="Variant.Outlined" @bind-Value="Subject.Name" />
                <MudSelect Label="@Localizer["SubjectSemester"]" Variant="Variant.Outlined" @bind-Value="Subject.Semester">
                    @foreach (var semester in EnumService.GetLocalizedEnumValues<Semester>())
                    {
                        <MudSelectItem Value="@semester.Item1">@semester.Item2</MudSelectItem>
                    }
                </MudSelect>
                @if (_studyPrograms is not null)
                {
                    <MudSelect Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined" @bind-Value="Subject.StudyProgram">
                        @foreach (var studyProgram in _studyPrograms)
                        {
                            <MudSelectItem Value="@studyProgram">@studyProgram.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
                <MudSelect T="RequirementLevel" Label="@Localizer["SubjectRequired"]" Variant="Variant.Outlined" @bind-Value="Subject.RequirementLevel">
                    @foreach (var requirementLevel in EnumService.GetLocalizedEnumValues<RequirementLevel>())
                    {
                        <MudSelectItem Value="@requirementLevel.Item1">@requirementLevel.Item2</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="HandleDialog">@(_add ? Localizer["Add"] : Localizer["Edit"])</MudButton>
        <MudButton Color="Color.Secondary" OnClick="@(() => MudDialog.Cancel())">@Localizer["Cancel"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public Subject? Subject { get; set; }

    private MudForm _form = null!;
    private bool _add;
    private IEnumerable<StudyProgram>? _studyPrograms;

    protected override async Task OnInitializedAsync()
    {
        _add = Subject is null;
        Subject ??= new Subject();

        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
    }

    private async Task HandleDialog()
    {
        await _form.Validate();
        if (!_form.IsValid || Subject is null) return;

        MudDialog.Close(DialogResult.Ok(Subject));
    }
}
