@page "/applications"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Components.Shared
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService
@inject DocumentService DocumentService

@attribute [Authorize(Roles = $"{Student.Role}")]

<PageTitle>@Localizer["Applications"]</PageTitle>

<MudText GutterBottom Typo="Typo.h4">@Localizer["Applications"]</MudText>

@if (_student is not null)
{
    @if (_student.IndividualPlan is not null)
    {
        <MudStack Class="mt-4">
            <MudText Typo="Typo.h6">@Localizer["DissertationExam"]</MudText>
            <MudGrid>
                <MudItem xs="8">
                    <MudText>@Localizer["SubjectsExamApplication"]</MudText>
                </MudItem>
                @if (_student.SubjectsExamApplication is null)
                {
                    <MudItem xs="4">
                        <MudTooltip Text="@Localizer["ExamApplicationCreate"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Info" Icon="@Icons.Material.Filled.Add" Href="/applications/subjects-exam-application" />
                        </MudTooltip>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="4">
                        <MudTooltip Text="@Localizer["ExamApplicationDelete"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteSubjectsExamApplication" />
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="2">
                        <MudTooltip Text="@Localizer["ExamApplicationGenerate"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Info" Icon="@Icons.Material.Filled.Print" OnClick="@(() => DocumentService.DownloadSubjectsExamApplicationDocument(_student.SubjectsExamApplication))" />
                        </MudTooltip>
                    </MudItem>
                }
            </MudGrid>
            <MudGrid>
                <MudItem xs="8">
                    <MudText>@Localizer["ExamApplication"]</MudText>
                </MudItem>
                @if (_student.ExamApplication is null)
                {
                    <MudItem xs="4">
                        <MudTooltip Text="@Localizer["ExamApplicationCreate"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Info" Icon="@Icons.Material.Filled.Add" Href="/applications/exam-application"></MudIconButton>
                        </MudTooltip>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="2">
                        <MudTooltip Text="@Localizer["ExamApplicationDelete"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteExamApplication" />
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="2">
                        <MudTooltip Text="@Localizer["ExamApplicationGenerate"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Info" Icon="@Icons.Material.Filled.Print" OnClick="@(() => DocumentService.DownloadExamApplicationDocument(_student.ExamApplication))" />
                        </MudTooltip>
                    </MudItem>
                }
            </MudGrid>

            <MudText Typo="Typo.h6">@Localizer["Dissertation"]</MudText>
            <MudGrid>
                <MudItem xs="8">
                    <MudText>@Localizer["DissertationDefenseApplication"]</MudText>
                </MudItem>
                @if (_student.DissertationDefenseApplication is null)
                {
                    <MudItem xs="4">
                        <MudTooltip Text="@Localizer["ExamApplicationCreate"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Info" Icon="@Icons.Material.Filled.Add" Href="/applications/disseration-defense-application"></MudIconButton>
                        </MudTooltip>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="2">
                        <MudTooltip Text="@Localizer["ExamApplicationDelete"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteDissertationDefenseApplication" />
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="2">
                        <MudTooltip Text="@Localizer["ExamApplicationGenerate"]">
                            <MudIconButton Size="Size.Medium" Color="Color.Info" Icon="@Icons.Material.Filled.Print" OnClick="@(() => DocumentService.DownloadDissertationDefenseApplicationDocument(_student.DissertationDefenseApplication))" />
                        </MudTooltip>
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    }
    else
    {
        <MudAlert Severity="Severity.Error">
            @Localizer["IndividualPlanAssignError"]
        </MudAlert>
    }
}

@code {
    private Student? _student;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await UsersService.GetCurrentUserIdAsync();
        _student = await UnitOfWork.Students.GetByUserIdAsync(currentUserId);
    }

    private async Task DeleteSubjectsExamApplication()
    {
        if (_student?.SubjectsExamApplication is null) return;

        UnitOfWork.SubjectsExamApplications.Delete(_student.SubjectsExamApplication);
        await UnitOfWork.CompleteAsync();
    }

    private async Task DeleteExamApplication()
    {
        if (_student?.ExamApplication is null) return;

        UnitOfWork.ExamApplications.Delete(_student.ExamApplication);
        await UnitOfWork.CompleteAsync();
    }

    private async Task DeleteDissertationDefenseApplication()
    {
        if (_student?.DissertationDefenseApplication is null) return;

        UnitOfWork.DissertationDefenseApplications.Delete(_student.DissertationDefenseApplication);
        await UnitOfWork.CompleteAsync();
    }
}