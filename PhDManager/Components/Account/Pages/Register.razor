@page "/Account/Register/{InvitationGuid}"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject IUserStore<ApplicationUser> UserStore
@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UsersService UsersService

<PageTitle>@Localizer["SignUp"]</PageTitle>

@if (_invitation is not null)
{
    @if (_invitationExpired || _userExists)
    {
        <MudAlert Severity="Severity.Error">@Localizer["SignUpExpired"]</MudAlert>
    }
    else
    {
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudText Typo="Typo.h3" GutterBottom="true">@Localizer["SignUp"]</MudText>
            <MudImage Class="height-half" Src="@Assets["register.svg"]" />

            <MudStack Class="width-three-quarters" Spacing="5">
                <StatusMessage Message="@Message" />
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                    <DataAnnotationsValidator />

                    <MudText Typo="Typo.body1" GutterBottom="true">@Localizer["SignUpMessage"]</MudText>

                    <MudStack Spacing="3">
                        <MudStaticTextField For="@(() => Input.DisplayName)" @bind-Value="Input.DisplayName"
                        Variant="Variant.Outlined"
                        Label="@Localizer["FullName"]"
                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "true" }, { "aria-required", "true" } } )" />

                        <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                        Variant="Variant.Outlined"
                        Label="@Localizer["Username"]"
                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "true" }, { "aria-required", "true" } } )" />

                        <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                        Variant="Variant.Outlined"
                        Label="@Localizer["Password"]" InputType="InputType.Password"
                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />

                        <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                        Variant="Variant.Outlined"
                        Label="@Localizer["ConfirmPassword"]" InputType="InputType.Password"
                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />

                        <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">@Localizer["SignUp"]</MudStaticButton>
                    </MudStack>
                </EditForm>

                <MudText Typo="Typo.body1" GutterBottom="true">@Localizer["SignUpService"]</MudText>
                <ExternalLoginPicker />
            </MudStack>
        </MudStack>
    }
}

@code {
    [Parameter]
    public string InvitationGuid { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private readonly IEnumerable<IdentityError>? _identityErrors = null;
    private Invitation? _invitation;
    private bool _invitationExpired = false;
    private bool _userExists = false;

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        _invitation = await UnitOfWork.Invitations.GetByGuidAsync(InvitationGuid);

        if (_invitation is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _invitationExpired = DateTime.UtcNow > _invitation.Expiration;
        _userExists = (await UsersService.GetUserByEmailAsync(_invitation.Email)) is not null;
    }

    public async Task RegisterUser(EditContext editContext)
    {
        if (_invitation is null) return;
        var user = await UsersService.RegisterUserAsync(_invitation.Email, Input.Username, Input.DisplayName, Input.Password);

        if (user is null) return;

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, _invitation.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new Dictionary<string, object?> { ["email"] = _invitation.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Full name")]
        public string DisplayName { get; set; } = "";

        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "{0} has to be from {2} to {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirmation password")]
        [Compare("Password", ErrorMessage = "Passwords doesn't match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
