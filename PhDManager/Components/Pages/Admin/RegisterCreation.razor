@page "/admin/create-register"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject NavigationManager NavigationManager
@inject UsersService UsersService

@attribute [Authorize(Roles = $"{Admin.Role}")]

@if (Registration is null)
{
<MudForm @ref="_form">
    <MudSelect T="IdentityRole" Label="@Localizer["Role"]" Variant="Variant.Outlined" @bind-Value="@_selectedRole">
        @foreach (var role in _roles)
        {
            <MudSelectItem Value="role">@role</MudSelectItem>
        }
    </MudSelect>

    <MudButton class="mt-4" OnClick="CreateRegistration" Variant="Variant.Filled" Color="Color.Primary">@Localizer["Create"]</MudButton>
</MudForm>
}
else
{
    <MudLink Href="@(Registration.Url)">@(Registration.Url)</MudLink>
}

@code {
    public Registration? Registration { get; set; } = null;

    private MudForm _form = default!;

    private IEnumerable<IdentityRole> _roles = [];

    private IdentityRole _selectedRole = default!;

    protected override void OnInitialized()
    {
        _roles = UsersService.Roles;
    }

    private async Task CreateRegistration()
    {
        if (_selectedRole.Name is null) return;

        string guid = Guid.NewGuid().ToString();
        Registration = new Registration
            {
                Guid = guid,
                Url = NavigationManager.BaseUri + "Account/Register/" + guid,
                Role = _selectedRole.Name,
                Expiration = DateTime.UtcNow.AddHours(1)
            };
        await UnitOfWork.Registrations.AddAsync(Registration);
        await UnitOfWork.CompleteAsync();
    }
}
