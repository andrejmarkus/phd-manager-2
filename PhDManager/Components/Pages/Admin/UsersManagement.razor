@page "/admin/users"

@using LdapForNet
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IServiceProvider ServiceProvider
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService
@inject UserManager<ApplicationUser> UserManager;
@inject RoleManager<IdentityRole> RoleManager;

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Admin</MudText>

<MudDataGrid T="UserInfo" Items="@_users" Hover="true" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" ReadOnly="false" EditMode="DataGridEditMode.Form" StartedEditingItem="@CreateAddress" CommittedItemChanges="@UpdateUser">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">Users</MudText>
        <MudSpacer />
        <MudTextField Class="mr-4" @bind-Value="_search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _visible = true)">Add user</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.User.UserName" Title="Používateľské meno" Editable="false" />
        <PropertyColumn Property="u => u.User.DisplayName" Title="Celé meno" Editable="false" />
        <PropertyColumn Property="u => u.User.Email" Title="Email" Editable="false" />
        <PropertyColumn Property="u => u.User.EmailConfirmed" Title="Potvrdený email" Editable="false" />
        <PropertyColumn Property="u => u.Role" Title="Rola" Editable="true">
            <EditTemplate>
                <MudSelect Class="mt-2" Variant="Variant.Outlined" @bind-Value="context.Item.Role" Required>
                    @foreach (var role in _roles)
                    {
                        <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="u => u.User.Birthdate" Title="Dátum narodenia" Editable="true" Hidden Required="false">
            <EditTemplate>
                <MudText Class="mt-4">Osobné údaje</MudText>
                <MudDatePicker class="mt-1" ShowToolbar="false" Label="Dátum narodenia" Variant="Variant.Outlined" @bind-Date="context.Item.User.Birthdate"  />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="u => u.User.PhoneNumber" Title="Telefónne číslo" Editable="true" Hidden Required="false" />
        <PropertyColumn Property="u => u.User.Address.Street" Title="Ulica" Editable="true" Hidden Required="false" />
        <PropertyColumn Property="u => u.User.Address.HouseNumber" Title="Číslo domu" Editable="true" Hidden Required="false" />
        <PropertyColumn Property="u => u.User.Address.City" Title="Obec" Editable="true" Hidden Required="false" />
        <PropertyColumn Property="u => u.User.Address.PostalCode" Title="PSČ" Editable="true" Hidden Required="false" />
        <PropertyColumn Property="u => u.User.Address.Country" Title="Štát" Editable="true" Hidden Required="false">

        </PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <div class="d-flex">
                    @if (context.Item.User.IndividualPlan is not null)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteIndividualPlan(context.Item.User.IndividualPlan))" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Href="@($"/admin/individual-plan/edit/{context.Item.User.IndividualPlan.Guid}")" />
                    }
                </div>
                <div class="d-flex">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteUser(context.Item))" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </div>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserInfo" />
    </PagerContent>
</MudDataGrid>

<AddUsersDialog Visible=_visible />

@code {
    private UserInfo[] _users = { };
    private IdentityRole[] _roles = { };
    private string _search = "";
    private bool _visible = false;

    protected override async Task OnInitializedAsync()
    {
        _roles = RoleManager.Roles.ToArray();

        var usersTask = UserManager.Users.ToList().Select(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var usersService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await usersService.GetUserRoleAsync(u);
            return new UserInfo(u, role);
        });

        _users = await Task.WhenAll(usersTask);
    }

    private Func<UserInfo, bool> _quickFilter => u =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (u.User.UserName.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (u.User.Email.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{u.User.UserName} {u.User.Email}".Contains(_search))
            return true;

        return false;
    };

    private async Task CreateAddress(UserInfo userInfo)
    {
        userInfo.User.Address = userInfo.User.Address is null ? new() : userInfo.User.Address;
    }

    private async Task UpdateUser(UserInfo userInfo)
    {
        await UsersService.UpdateUserInfo(userInfo.User);
        await UsersService.UpdateUserRoleAsync(userInfo.User, userInfo.Role);
    }

    private async Task DeleteUser(UserInfo userInfo)
    {
        await UsersService.DeleteUserAsync(userInfo.User);
        _users = _users.Where(u => u.User.Id != userInfo.User.Id).ToArray();
    }

    private async Task DeleteIndividualPlan(IndividualPlan individualPlan)
    {
        await UnitOfWork.IndividualPlans.DeleteAsync(individualPlan.Id);
        await UnitOfWork.CompleteAsync();
    }

    private sealed class UserInfo(ApplicationUser user, string role)
    {
        public ApplicationUser User { get; set; } = user;
        public string Role { get; set; } = role;
    }
}
