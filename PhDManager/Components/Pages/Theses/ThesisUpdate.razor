@page "/theses/{ThesisGuid}/edit"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@inject IServiceProvider ServiceProvider
@inject UsersService UsersService
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Teacher, Admin")]

<PageTitle>Thesis Addition</PageTitle>

<MudText class="mb-5" Typo="Typo.h3">Návrh témy doktorandského štúdia</MudText>

@if (_thesis is not null)
{
    <MudForm @ref="_form">
        <MudText Typo="Typo.h5">Zadanie témy</MudText>
        <MudCheckBox T="bool" @bind-Value="_isEnglish">Je možné vypracovať tému v angličtine?</MudCheckBox>
        <MudTextField T="string" Required RequiredError="Je nutné zadať názov témy!" Label="Názov témy dizertačnej práce" Variant="Variant.Outlined" @bind-Value="_thesis.Title" />
        @if (_isEnglish)
        {
            <MudTextField T="string" Label="Title of the dissertation thesis" Variant="Variant.Outlined" @bind-Value="_thesis.TitleEnglish" />
        }
        <MudAutocomplete T="ApplicationUser" Required RequiredError="Je zvoliť školiteľa!" Label="Školiteľ" ToStringFunc="@(u => u is null ? null : u.DisplayName)" SearchFunc="SearchTeachers" Variant="Variant.Outlined" @bind-Value="_selectedSupervisor" />

        <MudText Typo="Typo.h5">Zaradenie témy</MudText>
        <MudAutocomplete T="StudyProgram" Required RequiredError="Je nutné zvoliť študijný odbor!" Label="Študijný odbor" ToStringFunc="@(sp => sp is null ? null : sp.Name)" Variant="Variant.Outlined" SearchFunc="SearchStudyPrograms" @bind-Value="_selectedStudyProgram" />
        <div class="d-flex gap-1">
            <MudCheckBox T="bool" @bind-bind-Value="_thesis.DailyStudy">denná</MudCheckBox>
            <MudCheckBox T="bool" @bind-Value="_thesis.ExternalStudy">externá</MudCheckBox>
        </div>

        <MudText Typo="Typo.h5">Špecifikácia témy</MudText>
        <MudTextField T="string" Required RequiredError="Je nutné zadať opis problému!" Label="Detailnejší opis problému" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.Description" />
        @if (_isEnglish)
        {
            <MudTextField T="string" Label="Detailed description of the problem" AutoGrow Lines="5" Variant="Variant.Outlined" @bind-Value="_thesis.DescriptionEnglish" />
        }
        <MudTextField T="string" Required RequiredError="Je nutné zadať predpokladaný vedecký prínos!" Label="Predpokladaný vedecký prínos (algoritmy, metodológie, ...)" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificContribution" />
        <MudTextField T="string" Required RequiredError="Je nutné zadať odporúčaný postup vedeckého bádania!" Label="Odporučány postup vedeckého bádania" AutoGrow Lines="3" Variant="Variant.Outlined" @bind-Value="_thesis.ScientificProgress" />

        <MudText Typo="Typo.h5">Ďalšie informácie</MudText>
        <MudSelect T="string" Required RequiredError="Je nutné zvoliť druh výskumu!" Label="Druh výskumu" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchType">
            <MudSelectItem T="string" Value="@("Aplikovaný výskum a experimentálny vývoj")">Aplikovaný výskum a experimentálny vývoj</MudSelectItem>
            <MudSelectItem T="string" Value="@("Aplikovaný výskum")">Aplikovaný výskum</MudSelectItem>
            <MudSelectItem T="string" Value="@("Základný výskum")">Základný výskum</MudSelectItem>
        </MudSelect>
        <MudTextField T="string" Required RequiredError="Je nutné zadať výskumnú úlohu" Label="Výskumná úloha, ktorej súčasťou bude riešená téma" AutoGrow Lines="4" Variant="Variant.Outlined" @bind-Value="_thesis.ResearchTask" />
        <MudTextField T="string" Required RequiredError="Je nutné zadať doterajšie výsledky riešenia na školiacom pracovisku!" Label="Doterajšie výsledky riešenia na školiacom pracovisku, vrátane odkazov na dostupné zdroje" AutoGrow Lines="6" Variant="Variant.Outlined" @bind-Value="_thesis.SolutionResults" />
        <MudButton class="mt-5" OnClick="UpdateThesis" Variant="Variant.Filled" Color="Color.Primary">Aktualizuj</MudButton>
    </MudForm>
}

@code {
    [Parameter]
    public string ThesisGuid { get; set; }

    private MudForm? _form;
    private IEnumerable<ApplicationUser> _teachers;
    private IEnumerable<StudyProgram>? _studyPrograms;

    private Thesis? _thesis;
    private bool _isEnglish;

    private ApplicationUser? _selectedSupervisor;
    private StudyProgram? _selectedStudyProgram;

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            _teachers = await userManager.Users.ToAsyncEnumerable().WhereAwait(async u => (await UsersService.GetUserRoleAsync(u)) == "Teacher").ToArrayAsync();
            _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
        }

        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
        _isEnglish = !string.IsNullOrWhiteSpace(_thesis.TitleEnglish);
        _selectedSupervisor = _teachers.FirstOrDefault(t => t.Id == _thesis.SupervisorId);
        _selectedStudyProgram = _studyPrograms.FirstOrDefault(sp => sp.Id == _thesis.StudyProgramId);
    }

    private async Task<IEnumerable<ApplicationUser>> SearchTeachers(string search, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(search))
            return _teachers;

        return _teachers.Where(t => t.UserName.Contains(search, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<StudyProgram>> SearchStudyPrograms(string search, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(search))
            return _studyPrograms;

        return _studyPrograms.Where(sp => sp.Name.Contains(search, StringComparison.OrdinalIgnoreCase));
    }

    private async Task UpdateThesis()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            _thesis.SupervisorId = _selectedSupervisor.Id;
            _thesis.StudyProgramId = _selectedStudyProgram.Id;

            await UnitOfWork.Theses.UpdateAsync(_thesis.Id, _thesis);
            await UnitOfWork.CompleteAsync();
            NavigationManager.NavigateTo("/theses");
        }
    }
}
