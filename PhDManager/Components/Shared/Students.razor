@using LdapForNet
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Enums
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject UsersService UsersService
@inject SchoolYearService SchoolYearService
@inject EnumService EnumService

<MudDataGrid @ref="_dataGrid" T="Student" Items="@_students" Hover SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">@Localizer["Students"]</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddStudent">@Localizer["UserAddLdap"]</MudButton>
        <MudButton Class="mx-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddStudentRegistration">@Localizer["UserRegister"]</MudButton>
        <MudTextField Class="mr-4" Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Immediate Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
        <MudSelect T="StudentState?" Variant="Variant.Outlined" Label="@Localizer["StudentState"]" Immediate ToStringFunc="@(s => s is null ? Localizer["AllPeople"] : EnumService.GetLocalizedEnumValue((StudentState)s))" @bind-Value="_studentState">
            <MudSelectItem T="StudentState?" Value="null">@Localizer["AllPeople"]</MudSelectItem>
            @foreach (var studentState in _studentStates)
            {
                <MudSelectItem T="StudentState?" Value="studentState.Item1">@studentState.Item2</MudSelectItem>
            }
        </MudSelect>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="ds => ds.User.UserName" Title="@Localizer["Username"]" />
        <PropertyColumn Property="ds => ds.User.DisplayName" Title="@Localizer["FullName"]" />
        <PropertyColumn Property="ds => ds.User.Email" Title="Email" />
        <PropertyColumn Property="ds => EnumService.GetLocalizedEnumValue(ds.State)" Title="@Localizer["StudentState"]" />
        <TemplateColumn Title="@Localizer["ProfileEdit"]">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="@Localizer["StudentDelete"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteStudent(context.Item))" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["StudentEdit"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateStudent(context.Item))" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["DissertationThesisAssign"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.ContactPage" OnClick="@(() => AssignThesis(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Student" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<Student> _dataGrid = default!;

    private IEnumerable<Student>? _students;
    private List<(StudentState, string)> _studentStates = [];

    private string _search = string.Empty;
    private StudentState? _studentState;

    protected override async Task OnInitializedAsync()
    {
        _students = await UnitOfWork.Students.GetAllAsync();
        _studentStates = EnumService.GetLocalizedEnumValues<StudentState>();
    }

    private Func<Student, bool> _quickFilter => ds =>
    {
        if (_studentState is not null && ds.State != _studentState)
            return false;

        if (string.IsNullOrWhiteSpace(_search))
            return true;

        string searchLower = _search.ToLower();

        return (ds.User.UserName?.Contains(searchLower, StringComparison.OrdinalIgnoreCase) == true ||
            ds.User.DisplayName?.Contains(searchLower, StringComparison.OrdinalIgnoreCase) == true ||
            ds.User.Email?.Contains(searchLower, StringComparison.OrdinalIgnoreCase) == true ||
            $"{ds.User.UserName} {ds.User.DisplayName} {ds.User.Email}".ToLower().Contains(searchLower));
    };

    private async Task AddStudent()
    {
        var dialog = await DialogService.ShowAsync<AddLdapUserDialog>(Localizer["UserAdd"], new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var entry = result.Data as LdapEntry;

        if (entry is null) return;

        var user = await UsersService.RegisterLdapUserWithoutPasswordAsync(entry, Student.Role);

        if (user is null) return;

        await UsersService.AddStudentToUser(user, new() { StartSchoolYear = SchoolYearService.CurrentSchoolYear, EndSchoolYear = SchoolYearService.GetSchoolYear(DateTime.Today.AddYears(3)) });
        await UnitOfWork.CompleteAsync();

        var student = (await UnitOfWork.Students.GetAllAsync())?.Where(s => s.User.Id == user.Id).FirstOrDefault();
        if (student is null)
        {
            await UsersService.DeleteUserAsync(user);
            return;
        }

        _students = await UnitOfWork.Students.GetAllAsync();

        await UpdateStudent(student);
    }

    private async Task DeleteStudent(Student student)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["UserDelete"], Localizer["UserDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        var user = student.User;

        if (student.Address is not null) UnitOfWork.Addresses.Delete(student.Address);
        if (student.SubjectsExamApplication is not null) UnitOfWork.SubjectsExamApplications.Delete(student.SubjectsExamApplication);
        if (student.ExamApplication is not null) UnitOfWork.ExamApplications.Delete(student.ExamApplication);
        if (student.StudentEvaluation is not null) UnitOfWork.StudentEvaluations.Delete(student.StudentEvaluation);
        UnitOfWork.Students.Delete(student);
        await UnitOfWork.CompleteAsync();
        await UsersService.DeleteUserAsync(user);

        _students = await UnitOfWork.Students.GetAllAsync();
    }

    private async Task UpdateStudent(Student student)
    {
        var parameters = new DialogParameters<EditStudentDialog> { { d => d.Student, student } };
        var dialog = await DialogService.ShowAsync<EditStudentDialog>(Localizer["UserEdit"], parameters, new() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var updatedStudent = result.Data as Student;

        if (updatedStudent is null) return;

        await UnitOfWork.Students.UpdateAsync(updatedStudent);
        await UnitOfWork.CompleteAsync();
    }

    private async Task AssignThesis(Student student)
    {
        var parameters = new DialogParameters<AssignThesisDialog> { { d => d.Student, student } };
        var dialog = await DialogService.ShowAsync<AssignThesisDialog>(Localizer["DissertationThesisAssign"], parameters, new() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var updatedStudent = result.Data as Student;

        if (updatedStudent is null) return;

        await UnitOfWork.Students.UpdateAsync(updatedStudent);
        await UnitOfWork.CompleteAsync();
    }

    private async Task AddStudentRegistration()
    {
        var parameters = new DialogParameters<RegistrationLinkDialog> { { d => d.Role, Student.Role } };
        await DialogService.ShowAsync<RegistrationLinkDialog>(Localizer["UserRegister"], parameters, new() { FullWidth = true, MaxWidth = MaxWidth.Medium });
    }
}
