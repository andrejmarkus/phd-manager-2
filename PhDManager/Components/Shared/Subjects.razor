@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IUnitOfWork UnitOfWork
@inject EnumService EnumService

<MudText Class="mt-2" Typo="Typo.h5" GutterBottom>@Localizer["Subjects"]</MudText>

<MudDataGrid T="Subject" Items="@_subjects" Hover SortMode="SortMode.Multiple" QuickFilter="@QuickFilter" Elevation="0">
    <ToolBarContent>
        <MudButton class="mx-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddSubject">@Localizer["Add"]</MudButton>
        <MudSpacer />
        <MudTextField Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="s => s.Name" Title="@Localizer["SubjectName"]" />
        <PropertyColumn Property="s => EnumService.GetLocalizedEnumValue(s.Semester)" Title="@Localizer["SubjectSemester"]" />
        <PropertyColumn Property="s => s.StudyProgram.Name" Title="@Localizer["StudyProgram"]" />
        <TemplateColumn Title="@Localizer["SubjectEdit"]">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="@Localizer["SubjectDelete"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteSubject(context.Item))" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer["SubjectEdit"]">
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateSubject(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Subject" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<Subject>? _subjects;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();
    }

    private Func<Subject, bool> QuickFilter => s =>
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        return s.Name.Contains(_search, StringComparison.OrdinalIgnoreCase) || $"{s.Name}".Contains(_search);
    };

    private async Task AddSubject()
    {
        var dialog = await DialogService.ShowAsync<ManageSubjectDialog>(Localizer["SubjectAdd"], new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        if (result.Data is not Subject subject) return;

        await UnitOfWork.Subjects.AddAsync(subject);
        await UnitOfWork.CompleteAsync();
        await LoadSubjects();
    }

    private async Task UpdateSubject(Subject subject)
    {
        var parameters = new DialogParameters<ManageSubjectDialog> { { d => d.Subject, subject } };
        var dialog = await DialogService.ShowAsync<ManageSubjectDialog>(Localizer["SubjectEdit"], parameters, new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        if (result.Data is not Subject updatedSubject) return;

        await UnitOfWork.Subjects.UpdateAsync(updatedSubject);
        await UnitOfWork.CompleteAsync();
        await LoadSubjects();
    }

    private async Task DeleteSubject(Subject subject)
    {
        var result = await DialogService.ShowMessageBox(Localizer["SubjectDelete"], Localizer["SubjectDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        UnitOfWork.Subjects.Delete(subject);
        await UnitOfWork.CompleteAsync();
        await LoadSubjects();
    }

    public async Task LoadSubjects()
    {
        _subjects = await UnitOfWork.Subjects.GetAllAsync();
    }
}
