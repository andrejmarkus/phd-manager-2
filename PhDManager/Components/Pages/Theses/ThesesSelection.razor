@page "/theses"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IServiceProvider ServiceProvider
@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject UsersService UsersService
@inject DocumentService DocumentService
@inject UserManager<ApplicationUser> UserManager

<PageTitle>@Localizer["DissertationTheses"]</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["DissertationTheses"]</MudText>

<MudStack Row>
    <MudTextField FullWidth T="string" @bind-Value="@_search" @bind-Value:after="UpdateSearch" Immediate="true" Label="@Localizer["Search"]" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    @if (_studyPrograms is not null)
    {
        <MudSelect T="StudyProgram" @bind-Value="@_selectedStudyProgram" @bind-Value:after="UpdateSearch" Immediate="true" Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined">
            <MudSelectItem T="StudyProgram" Value="null">Všetky</MudSelectItem>
            @foreach (var studyProgram in _studyPrograms)
            {
                <MudSelectItem Value="@studyProgram">@studyProgram.Name</MudSelectItem>
            }
        </MudSelect>
    }
    @if (_teachers is not null)
    {
        <MudSelect T="ApplicationUser" @bind-Value="@_selectedTeacher" @bind-Value:after="UpdateSearch" Immediate="true" Label="@Localizer["Supervisor"]" Variant="Variant.Outlined">
            <MudSelectItem T="ApplicationUser" Value="null">Všetci</MudSelectItem>
            @foreach (var teacher in _teachers)
            {
                <MudSelectItem Value="@teacher">@teacher.DisplayName</MudSelectItem>
            }
        </MudSelect>
    }
</MudStack>

<MudStack Class="mt-1" Row>
    <AuthorizeView Roles="Admin, Učiteľ">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/theses/add">@Localizer["Add"]</MudButton>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Admin, Učiteľ, Externista">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/theses/review">@Localizer["Approve"]</MudButton>
        </Authorized>
    </AuthorizeView>
</MudStack>

<MudGrid Class="mt-1">
    @if (_theses is not null)
    {
        @foreach (var thesis in _theses)
        {
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-2">
                    <MudLink Color="Color.Default" Underline="Underline.None" Href="@($"/theses/{thesis.Guid}")">
                        <MudText Typo="Typo.h6">@thesis.Title</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["Supervisor"]: </b> @thesis.Supervisor.DisplayName</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["StudyProgram"]: </b> @thesis.StudyProgram.Name</MudText>
                    </MudLink>
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <MudStack Row Class="mt-2">
                                <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteThesis(thesis))" />
                                <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/theses/edit/{thesis.Guid}")" />
                                <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Print" OnClick="@(async () => await DocumentService.DownloadThesisDocument(thesis))" />
                            </MudStack>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="Učiteľ">
                        <Authorized>
                            @if (_currentUserId?.Equals(thesis.SupervisorId) == true)
                            {
                                <MudStack Row Class="mt-2">
                                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteThesis(thesis))" />
                                    <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/theses/edit/{thesis.Guid}")" />
                                    <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Print" OnClick="@(async () => await DocumentService.DownloadThesisDocument(thesis))" />
                                </MudStack>
                            }
                        </Authorized>
                    </AuthorizeView>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private IEnumerable<Thesis>? _theses;
    private IEnumerable<StudyProgram>? _studyPrograms;
    private IEnumerable<ApplicationUser>? _teachers;
    private string? _currentUserId;

    private string _search = "";
    private StudyProgram? _selectedStudyProgram;
    private ApplicationUser? _selectedTeacher;

    protected override async Task OnInitializedAsync()
    {
        var theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = theses?.Where(t => t.IsApproved).ToArray();
        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
        _teachers = await UserManager.Users.ToAsyncEnumerable().WhereAwait(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var usersService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await usersService.GetUserRoleAsync(u);
            return role == "Učiteľ";
        }).ToArrayAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();
    }

    private async Task DeleteThesis(Thesis thesis)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["DissertationThesisDelete"], Localizer["DissertationThesisDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        foreach (var comment in thesis.Comments)
        {
            await UnitOfWork.Comments.DeleteAsync(comment.Id);
        }
        await UnitOfWork.Theses.DeleteAsync(thesis.Id);
        await UnitOfWork.CompleteAsync();
        _theses = _theses?.Where(t => t.Id != thesis.Id);
    }

    private async Task UpdateSearch()
    {
        var theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = theses?.Where(t => t.IsApproved).Where(t => t.Title.ToLower().Contains(_search.ToLower()) || t.TitleEnglish?.ToLower().Contains(_search.ToLower()) == true).ToArray();
        if (_selectedStudyProgram is not null) {
            _theses = _theses?.Where(t => t.StudyProgram == _selectedStudyProgram).ToArray();
        }
        if (_selectedTeacher is not null) {
            _theses = _theses?.Where(t => t.Supervisor == _selectedTeacher).ToArray();
        }
    }
}
