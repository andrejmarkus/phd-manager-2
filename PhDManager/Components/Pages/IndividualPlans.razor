@page "/management/individual-plans"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject DocumentService DocumentService
@inject UsersService UsersService

@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}")]

<PageTitle>@Localizer["IndividualPlans"]</PageTitle>

<MudDataGrid T="IndividualPlan" Items="_individualPlans" Hover SortMode="SortMode.Multiple" QuickFilter="_quickFilter" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">@Localizer["IndividualPlans"]</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/management/individual-plans/add">@Localizer["IndividualPlanAdd"]</MudButton>
        <MudTextField Class="ml-4" Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="ip => ip.Student.Thesis!.Title" Title="@Localizer["DissertationThesisTitle"]" />
        <PropertyColumn Property="ip => ip.Student.Thesis!.Supervisor.User.DisplayName" Title="@Localizer["SupervisorName"]" />
        <PropertyColumn Property="ip => ip.Student.Thesis!.Supervisor.User.Email" Title="@Localizer["SupervisorEmail"]" />
        <PropertyColumn Property="ip => ip.Student.User.DisplayName" Title="@Localizer["StudentName"]" />
        <PropertyColumn Property="ip => ip.Student.User.Email" Title="@Localizer["StudentEmail"]" />
        <TemplateColumn Title="@Localizer["IndividualPlanEdit"]">
            <CellTemplate>
                <MudStack Row>
                    @if (context.Item.Student.IndividualPlan is not null)
                    {
                        <MudTooltip Text="@Localizer["IndividualPlanDelete"]">
                            <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteIndividualPlan(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localizer["IndividualPlanEdit"]">
                            <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/management/individual-plans/edit/{context.Item.Guid}")" />
                        </MudTooltip>
                        <MudTooltip Text="@Localizer["IndividualPlanGenerate"]">
                            <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Print" OnClick="@(async () => await DocumentService.DownloadIndividualPlanDocument(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localizer["GradesEdit"]">
                            <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Grading" OnClick="@(async () => await UpdateGrades(context.Item))" />
                        </MudTooltip>
                    }
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="IndividualPlan" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<IndividualPlan>? _individualPlans;

    private string? _currentUserRole;
    private string? _currentUserId;
    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _currentUserRole = await UsersService.GetCurrentUserRoleAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();

        await LoadUsers();
    }

    private Func<IndividualPlan, bool> _quickFilter => ip =>
    {
        if (ip.Student.Thesis is null)
            return false;

        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (ip.Student.Thesis.Title.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (ip.Student.Thesis.Supervisor.User.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (ip.Student.Thesis.Supervisor.User.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (ip.Student.User.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (ip.Student.User.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if ($"{ip.Student.Thesis.Title} {ip.Student.Thesis.Supervisor.User.DisplayName} {ip.Student.Thesis.Supervisor.User.Email} {ip.Student.User.DisplayName} {ip.Student.User.Email}".Contains(_search))
            return true;

        return false;
    };

    private async Task DeleteIndividualPlan(IndividualPlan individualPlan)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["IndividualPlanDelete"], Localizer["IndividualPlanDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        UnitOfWork.IndividualPlans.Delete(individualPlan);
        await UnitOfWork.CompleteAsync();
        await LoadUsers();
    }

    private async Task UpdateGrades(IndividualPlan individualPlan)
    {
        var subjectGrades = individualPlan.Student.IndividualPlan?.IndividualPlanSubjects;
        var parameters = new DialogParameters<ManageGradesDialog> { { d => d.IndividualPlanSubjects, subjectGrades } };
        var dialog = await DialogService.ShowAsync<ManageGradesDialog>(Localizer["UserEdit"], parameters, new() { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null || result.Canceled) return;

        var updatedIndividualPlanSubjects = result.Data as IEnumerable<IndividualPlanSubject>;

        if (updatedIndividualPlanSubjects is null) return;

        foreach (var individualPlanSubject in updatedIndividualPlanSubjects)
        {
            await UnitOfWork.IndividualPlanSubjects.UpdateAsync(individualPlanSubject);
        }
        await UnitOfWork.CompleteAsync();
    }

    private async Task LoadUsers()
    {
        _individualPlans = await UnitOfWork.IndividualPlans.GetAllAsync();
        _individualPlans = _individualPlans?.Where(ip => ip.Student.Thesis is not null);

        if (_currentUserRole == Teacher.Role)
        {
            _individualPlans = _individualPlans?.Where(ip => ip.Student.Thesis!.Supervisor.User.Id == _currentUserId);
        }
    }
}
