@page "/management/individual-plans/add"
@page "/management/individual-plans/edit/{IndividualPlanGuid}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Enums
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IServiceProvider ServiceProvider
@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject UsersService UsersService
@inject EnumService EnumService

@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}")]

<PageTitle>@Localizer["IndividualPlanCreate"]</PageTitle>

<MudText Typo="Typo.h3">@Localizer["IndividualPlanTitle"]</MudText>

<MudForm @ref="_form">
    <MudAutocomplete T="Student" Required RequiredError="@Localizer["IndividualPlanStudentError"]" Label="@Localizer["IndividualPlanStudent"]" ToStringFunc="@(s => s is null ? null : s.User.DisplayName)" SearchFunc="SearchStudents" Variant="Variant.Outlined" @bind-Value="@_individualPlan.Student" @bind-Value:after="LoadSubjects" />
    @if (_individualPlan.Student is not null) {
        @if (_individualPlan.Student?.Thesis is not null)
        {
            @if (_individualPlan.Student?.HasInfo == true)
            {
                <MudDatePicker ShowToolbar="false" Label="@Localizer["Birthdate"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.Student.User.Birthdate" ReadOnly />
                <MudField T="string" Label="@Localizer["Address"]" Variant="Variant.Outlined">@_individualPlan.Student.Address?.FullAddress</MudField>
                <MudField T="string" Label="@Localizer["PhoneNumber"]" Variant="Variant.Outlined">@_individualPlan.Student.User.PhoneNumber</MudField>
                <MudField T="string" Label="@Localizer["StudyForm"]" Variant="Variant.Outlined">@(EnumService.GetLocalizedEnumValue(_individualPlan.Student.StudyForm))</MudField>
                <MudField T="string" Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined">@_individualPlan.Student.StudyProgram?.Name</MudField>
                <MudField T="string" Label="@Localizer["StudyField"]" Variant="Variant.Outlined">@_individualPlan.Student.StudyProgram?.StudyFieldName</MudField>
                <MudField T="string" Label="@Localizer["Supervisor"]" Variant="Variant.Outlined">@_individualPlan.Student.Thesis.Supervisor.User.DisplayName</MudField>
                <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanStudyStartDateError"]" Label="@Localizer["IndividualPlanStudyStartDate"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.StudyStartDate" />
            }
            else
            {
                <MudText Color="Color.Error">@Localizer["IndividualPlanError"]</MudText>
            }
        }
        else
        {
            <MudText Color="Color.Error">@Localizer["IndividualPlanThesisError"]</MudText>
        }
    }

    <MudText Typo="Typo.h5">@Localizer["Deadlines"]</MudText>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">@Localizer["IndividualPlanDissertationExamDateInfo"]</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanDissertationExamDateError"]" Label="@Localizer["IndividualPlanDissertationExamDate"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.DissertationApplicationDate" />
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">@Localizer["IndividualPlanDissertationSubmissionDateInfo"]</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanDissertationSubmissionDateError"]" Label="@Localizer["IndividualPlanDissertationSubmissionDate"]" Variant="Variant.Outlined" FixDay="1" OpenTo="OpenTo.Month" @bind-Date="_individualPlan.DissertationSubmissionDate" />
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">@Localizer["IndividualPlanStudyEndDateInfo"]</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanStudyEndDateError"]" Label="@Localizer["IndividualPlanStudyEndDate"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.StudyEndDate" />
    </MudStack>

    <MudText Typo="Typo.h4">@Localizer["StudyPart"]</MudText>

    @if (_individualPlan.Student is not null)
    {
        <MudText Typo="Typo.h5">@Localizer["IndividualPlanSubjectsInfo"]</MudText>
        @foreach (var subject in _selectedSubjects.Select((e, i) => new { Element = e, Index = i }))
        {
            <MudStack Row AlignItems="AlignItems.Center">
                <MudSelect T="Subject" Required RequiredError="@Localizer["IndividualPlanSubjectError"]" Label="@($"{Localizer["Subject"]} {subject.Index + 1}")" ToStringFunc="@(s => s is null ? null : s.Name)" Variant="Variant.Outlined" @bind-Value="_selectedSubjects[subject.Index]">
                    @if (_subjects is not null)
                    {
                        @foreach (var subject in _subjects.Where(s => s.RequirementLevel == RequirementLevel.Compulsory))
                        {
                            <MudSelectItem Value="subject">@subject.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudTooltip Text="@Localizer["SubjectDelete"]">
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => _selectedSubjects.RemoveAt(subject.Index))" />
                </MudTooltip>
            </MudStack>
        }
        <MudTextField T="string" Label="@Localizer["IndividualPlanThematicAreas"]" Variant="Variant.Outlined" @bind-Value="_individualPlan.ThematicAreas" />
        <MudButton class="my-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _selectedSubjects.Add(new()))">@Localizer["SubjectAdd"]</MudButton>

        <MudText Typo="Typo.h5">@Localizer["IndividualPlanAdditionalSubjectsInfo"]</MudText>
        @foreach (var subject in _selectedOptionalSubjects.Select((e, i) => new { Element = e, Index = i }))
        {
            <MudStack Row AlignItems="AlignItems.Center">
                <MudSelect T="Subject" Required RequiredError="@Localizer["IndividualPlanSubjectError"]" Label="@($"{Localizer["Subject"]} {subject.Index + 1}")" ToStringFunc="@(s => s is null ? string.Empty : s.Name)" Variant="Variant.Outlined" @bind-Value="_selectedOptionalSubjects[subject.Index]">
                    @if (_subjects is not null)
                    {
                        @foreach (var subject in _subjects.Where(s => s.RequirementLevel != RequirementLevel.Compulsory))
                        {
                            <MudSelectItem Value="subject">@subject.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudTooltip Text="@Localizer["AdditionalSubjectDelete"]">
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => _selectedOptionalSubjects.RemoveAt(subject.Index))" />
                </MudTooltip>
            </MudStack>
        }
        <MudButton class="my-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _selectedOptionalSubjects.Add(new()))">@Localizer["AdditionalSubjectAdd"]</MudButton>
    }

    <MudText Typo="Typo.h5">@Localizer["IndividualPlanWrittenThesisInfo"]</MudText>
    <MudTextField T="string" Label="@Localizer["IndividualPlanThesis"]" Required RequiredError="@Localizer["IndividualPlanThesisError"]" Variant="Variant.Outlined" @bind-Value="@_individualPlan.WrittenThesisTitle" />
    <MudTextField Style="white-space: pre-wrap;" T="string" Label="@Localizer["IndividualPlanWrittenThesisRequiredLiterature"]" Required RequiredError="@Localizer["IndividualPlanWrittenThesisLiteratureError"]" Variant="Variant.Outlined" AutoGrow Lines="10" @bind-Value="@_individualPlan.WrittenThesisRequiredLiterature" />
    <MudTextField Style="white-space: pre-wrap;" T="string" Label="@Localizer["IndividualPlanWrittenThesisRecommendedLiterature"]" Required RequiredError="@Localizer["IndividualPlanWrittenThesisLiteratureError"]" Variant="Variant.Outlined" AutoGrow Lines="10" @bind-Value="@_individualPlan.WrittenThesisRecommendedLiterature" />
    <MudTextField Style="white-space: pre-wrap;" T="string" Label="@Localizer["IndividualPlanWrittenThesisRecommendedLectures"]" Required RequiredError="@Localizer["IndividualPlanWrittenThesisRecommendedLecturesError"]" Variant="Variant.Outlined" AutoGrow Lines="8" @bind-Value="@_individualPlan.WrittenThesisRecommendedLectures" />

    <MudText Typo="Typo.h4">@Localizer["ScientificPart"]</MudText>

    @if (_individualPlan.Student?.Thesis is not null) {
        <MudField T="Thesis" Label="@Localizer["IndividualPlanThesis"]" Variant="Variant.Outlined">@_individualPlan.Student.Thesis.Title</MudField>
        <MudField T="string" Label="@Localizer["IndividualThesisResearchTask"]" Variant="Variant.Outlined">@_individualPlan.Student.Thesis.ResearchTask</MudField>
        <MudField T="string" Label="@Localizer["IndividualPlanSolutionResults"]" Variant="Variant.Outlined">@_individualPlan.Student.Thesis.SolutionResults</MudField>
    }

    <MudStack>
        <MudStack Row>
            <MudText Typo="Typo.h5">@Localizer["IndividualPlanSolvingProcedure"]</MudText>
            <MudSpacer />
            <MudText Typo="Typo.h5">@Localizer["IndividualPlanDeadline"]</MudText>
        </MudStack>
        @foreach (var task in _tasks.Select((e, i) => new { Element = e, Index = i }))
        {
            <MudStack Row AlignItems="AlignItems.Center">
                <MudTextField Style="white-space: pre-wrap;" Class="flex-1" T="string" Required Variant="Variant.Outlined" AutoGrow @bind-Value="_tasks[task.Index]" />
                <MudDatePicker Class="flex-none" ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanTaskError"]" Variant="Variant.Outlined" @bind-Date="_taskDeadlines[task.Index]" />
                <MudTooltip Text="@Localizer["TaskDelete"]">
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => { _tasks.RemoveAt(task.Index); _taskDeadlines.RemoveAt(task.Index); })" />
                </MudTooltip>
            </MudStack>
        }
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => { _tasks.Add(string.Empty); _taskDeadlines.Add(null); })">@Localizer["TaskAdd"]</MudButton>
    </MudStack>

    <MudButton class="mt-6" OnClick="HandleIndividualPlan" Variant="Variant.Filled" Color="Color.Primary">@(IndividualPlanGuid is null ? Localizer["Add"] : Localizer["Edit"])</MudButton>
</MudForm>

@code {
    [Parameter]
    public string? IndividualPlanGuid { get; set; }

    private string? _currentUserRole;
    private string? _currentUserId;

    private MudForm _form = default!;
    private IEnumerable<Student>? _students;
    private IEnumerable<Subject>? _subjects;

    private IndividualPlan _individualPlan = new();
    private List<Subject> _selectedSubjects = [];
    private List<Subject> _selectedOptionalSubjects = [];
    private List<string> _tasks = [];
    private List<DateTime?> _taskDeadlines = [];

    protected override async Task OnInitializedAsync()
    {
        _currentUserRole = await UsersService.GetCurrentUserRoleAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();

        if (IndividualPlanGuid is not null)
        {
            var individualPlan = await UnitOfWork.IndividualPlans.GetByGuidAsync(IndividualPlanGuid);
            if (individualPlan is not null)
            {
                _individualPlan = individualPlan;
                _selectedSubjects = _individualPlan.Subjects.Where(s => s.RequirementLevel == RequirementLevel.Compulsory).ToList();
                _selectedOptionalSubjects = _individualPlan.Subjects.Where(s => s.RequirementLevel != RequirementLevel.Compulsory).ToList();
                _tasks = _individualPlan.Tasks.ToList();
                _taskDeadlines = _individualPlan.TaskDeadlines.ToList();
            }
        }
        else
        {
            _individualPlan.StudyStartDate = new DateTime(DateTime.Now.Year, 9, 1);
            _individualPlan.DissertationApplicationDate = new DateTime(DateTime.Now.Year + 1, 9, 6);
            _individualPlan.DissertationSubmissionDate = new DateTime(DateTime.Now.Year + 3, 4, 1);
            _individualPlan.StudyEndDate = new DateTime(DateTime.Now.Year + 3, 8, 31);

            _tasks.AddRange(Enumerable.Repeat<string>(string.Empty, 6).ToList());
            _taskDeadlines.Add(new DateTime(DateTime.Now.Year, 12, 1));
            _taskDeadlines.Add(new DateTime(DateTime.Now.Year + 1, 6, 1));
            _taskDeadlines.Add(new DateTime(DateTime.Now.Year + 1, 12, 1));
            _taskDeadlines.Add(new DateTime(DateTime.Now.Year + 2, 6, 1));
            _taskDeadlines.Add(new DateTime(DateTime.Now.Year + 2, 12, 1));
            _taskDeadlines.Add(new DateTime(DateTime.Now.Year + 3, 4, 1));
        }

        _students = await UnitOfWork.Students.GetAllAsync();

        if (_currentUserRole == Teacher.Role)
        {
            _students = _students?.Where(s => s.Thesis?.Supervisor.User.Id == _currentUserId);
        }
    }

    private Task<IEnumerable<Student>?> SearchStudents(string search, CancellationToken token)
    {
        var students = _students?.Where(s => s.IndividualPlan is null);
        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(students);

        return Task.FromResult(students?.Where(s => s.User.DisplayName is not null && s.User.DisplayName.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private Task<IEnumerable<Subject>> SearchSubjects(string search, CancellationToken token)
    {
        if (_subjects is null) return Task.FromResult(Enumerable.Empty<Subject>());

        var subjects = _subjects.Where(t => t.StudyProgram == _individualPlan.Student?.StudyProgram);
        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(subjects);

        return Task.FromResult(subjects.Where(s => s.Name.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task HandleIndividualPlan()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
                
        _individualPlan.StudyStartDate = _individualPlan.StudyStartDate?.ToUniversalTime();
        _individualPlan.DissertationApplicationDate = _individualPlan.DissertationApplicationDate?.ToUniversalTime();
        _individualPlan.DissertationSubmissionDate = _individualPlan.DissertationSubmissionDate?.ToUniversalTime();
        _individualPlan.StudyEndDate = _individualPlan.StudyEndDate?.ToUniversalTime();

        _individualPlan.Subjects = _selectedSubjects.Concat(_selectedOptionalSubjects).ToList();
        _individualPlan.Tasks = _tasks.ToArray();
        _individualPlan.TaskDeadlines = _taskDeadlines.Select(d => { d = d?.ToUniversalTime(); return d; }).ToArray();

        _individualPlan.CurrentDate = DateTime.UtcNow;

        if (IndividualPlanGuid is null)
        {
            await UnitOfWork.IndividualPlans.AddAsync(_individualPlan);
        }
        else
        {
            await UnitOfWork.IndividualPlans.UpdateAsync(_individualPlan);
        }

        await UnitOfWork.CompleteAsync();
        NavigationManager.NavigateTo("/management/individual-plans");
    }

    private async Task LoadSubjects()
    {
        if (_individualPlan.Student?.StudyProgram is null) return;

        _subjects = (await UnitOfWork.Subjects.GetAllAsync())?.Where(s => s.StudyProgramId == _individualPlan.Student.StudyProgram.Id);
    }
}
