@page "/theses/{ThesisGuid}"

@using Microsoft.Extensions.Localization
@using PhDManager.Components.Dialogs
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Documents
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject UsersService UsersService
@inject NavigationManager NavigationManager
@inject DocumentService DocumentService
@inject InformationEmailSender EmailSender

<PageTitle>@Localizer["Thesis"]</PageTitle>

@if (_thesis is not null)
{
    <AuthorizeView Roles="@($"{Admin.Role}, {Teacher.Role}, {ExternalTeacher.Role}")">
        <Authorized>
            <MudStack Row Justify="Justify.Center">
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteThesis(_thesis))" />
                <MudIconButton Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/management/theses/edit/{_thesis.Guid}")" />
                <MudIconButton Color="Color.Info" Icon="@Icons.Material.Outlined.Print" OnClick="@(async () => await DocumentService.Download(_thesis))" />
            </MudStack>
        </Authorized>
    </AuthorizeView>
    <MudText Align="Align.Center" Typo="Typo.h4">@_thesis.Title</MudText>
    <MudStack Spacing="5">
        @if (_thesis.TitleEnglish is not null)
        {
            <MudStack>
                <MudText Typo="Typo.h6">Dissertation thesis title</MudText>
                <MudText Typo="Typo.body1">@_thesis.TitleEnglish</MudText>
            </MudStack>
        }
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["Supervisor"]</MudText>
            <MudText Typo="Typo.body1">@_thesis.Supervisor.User.DisplayName</MudText>
        </MudStack>
        @if (_thesis.SupervisorSpecialist is not null)
        {
            <MudStack>
                <MudText Typo="Typo.h6">@Localizer["SupervisorSpecialist"]</MudText>
                <MudText Typo="Typo.body1">@_thesis.SupervisorSpecialist.User.DisplayName</MudText>
            </MudStack>
        }
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["StudyProgram"]</MudText>
            <MudText Typo="Typo.body1">@_thesis.StudyProgram.Name</MudText>
        </MudStack>
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["StudyField"]</MudText>
            <MudText Typo="Typo.body1">@_thesis.StudyProgram.StudyFieldName</MudText>
        </MudStack>
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["DissertationThesisDescription"]</MudText>
            <MudText Typo="Typo.body1" Class="break-lines">@_thesis.Description</MudText>
        </MudStack>
        @if (_thesis.DescriptionEnglish is not null)
        {
            <MudStack>
                <MudText Typo="Typo.h6">Detailed description of the problem</MudText>
                <MudText Typo="Typo.body1" Class="break-lines">@_thesis.DescriptionEnglish</MudText>
            </MudStack>
        }
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["DissertationThesisScientificContribution"]</MudText>
            <MudText Typo="Typo.body1" Class="break-lines">@_thesis.ScientificContribution</MudText>
        </MudStack>
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["DissertationThesisScientificProgress"]</MudText>
            <MudText Typo="Typo.body1" Class="break-lines">@_thesis.ScientificProgress</MudText>
        </MudStack>
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["ResearchType"]</MudText>
            <MudText Typo="Typo.body1">@_thesis.ResearchType</MudText>
        </MudStack>
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["DissertationThesisResearchTask"]</MudText>
            <MudText Typo="Typo.body1" Class="break-lines">@_thesis.ResearchTask</MudText>
        </MudStack>
        <MudStack>
            <MudText Typo="Typo.h6">@Localizer["DissertationThesisSolutionResults"]</MudText>
            <MudText Typo="Typo.body1" Class="break-lines">@_thesis.SolutionResults</MudText>
        </MudStack>
        <MudStack Row Spacing="2">
            <MudText>@Localizer["IndividualPlanContact"]:</MudText>
            <MudLink Href="@($"mailto:{@_thesis.Supervisor.User.Email}")">@_thesis.Supervisor.User.Email</MudLink>
        </MudStack>
    </MudStack>

    @if (_thesis.IsApproved && _thesis.Student is null)
    {
        <AuthorizeView Roles="@($"{Admin.Role}, {Teacher.Role}, {ExternalTeacher.Role}, {Student.Role}")" Context="generalContext">
            <Authorized>
                <MudStack Class="mt-5">
                    <MudText Typo="Typo.h6">@Localizer["Interest"]</MudText>
                    <MudDataGrid T="Student" Items="_thesis.InterestedStudents" SortMode="SortMode.Multiple" Elevation="0">
                        <Columns>
                            <PropertyColumn Property="ds => ds.User.DisplayName" Title="@Localizer["FullName"]" />
                            <PropertyColumn Property="ds => ds.User.Email" Title="Email" />
                        </Columns>
                    </MudDataGrid>
                </MudStack>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="@($"{Student.Role}")">
            <Authorized>
                @if (_currentStudent is not null && _currentStudent.ThesisInterest is null)
                {
                    <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => AddThesisInterest(_currentStudent))">@Localizer["Enrol"]</MudButton>
                }
                else
                {
                    <MudText Class="mt-2" Color="Color.Error">@Localizer["EnrolError"]</MudText>
                }
            </Authorized>
        </AuthorizeView>
    }

    @if (!_thesis.IsApproved)
    {
        <AuthorizeView Roles="@($"{Admin.Role}, {Teacher.Role}, {ExternalTeacher.Role}")">
            <Authorized>
                <MudStack Class="mt-5">
                    @if (_thesis.Comments.Any())
                    {
                        <MudText Typo="Typo.h6">@Localizer["Comments"]</MudText>
                        @foreach (var comment in _thesis.Comments)
                        {
                            <MudPaper Class="pa-2">
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.h6">@comment.External.User.DisplayName</MudText>
                                        <MudText Typo="Typo.body1">@comment.Text</MudText>
                                    </MudStack>
                                    <AuthorizeView Roles="@($"{Admin.Role}")" Context="editContext">
                                        <Authorized>
                                            <MudStack Row>
                                                <MudTooltip Text="@Localizer["CommentDelete"]">
                                                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteComment(comment))" />
                                                </MudTooltip>
                                                <MudTooltip Text="@Localizer["CommentEdit"]">
                                                    <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateComment(comment))" />
                                                </MudTooltip>
                                            </MudStack>
                                        </Authorized>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="@($"{ExternalTeacher.Role}")" Context="editContext">
                                        <Authorized>
                                            @if (_currentUserId?.Equals(comment.External.UserId) == true)
                                            {
                                                <MudStack Row>
                                                    <MudTooltip Text="@Localizer["CommentDelete"]">
                                                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteComment(comment))" />
                                                    </MudTooltip>
                                                    <MudTooltip Text="@Localizer["CommentEdit"]">
                                                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateComment(comment))" />
                                                    </MudTooltip>
                                                </MudStack>
                                            }
                                        </Authorized>
                                    </AuthorizeView>
                                </MudStack>
                            </MudPaper>
                        }
                    }
                    <AuthorizeView Roles="@($"{ExternalTeacher.Role}")" Context="reviewerContext">
                        <Authorized>
                            <MudTextField @bind-Value="_commentText" @bind-Value:after="PostComment" Label="@Localizer["Comment"]" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="PostComment"></MudTextField>
                        </Authorized>
                    </AuthorizeView>
                </MudStack>
            </Authorized>
        </AuthorizeView>
    }
}

@code {
    [Parameter]
    public string ThesisGuid { get; set; } = string.Empty;

    private Thesis? _thesis;
    private string? _currentUserId;
    private Student? _currentStudent;

    private string _commentText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
        if (_thesis is null) NavigationManager.NavigateTo("/notfound");

        _currentUserId = await UsersService.GetCurrentUserIdAsync();
        _currentStudent = await UnitOfWork.Students.GetByUserIdAsync(_currentUserId);
    }

    private async Task AddThesisInterest(Student student)
    {
        if (_thesis is null) return;

        _thesis.InterestedStudents.Add(student);
        await UnitOfWork.Theses.UpdateAsync(_thesis);
        await UnitOfWork.CompleteAsync();
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);

        await EmailSender.SendThesisInterestAsync(_thesis?.Supervisor.User.Email ?? "", student.User.DisplayName ?? "", _thesis?.Title  ?? "");
    }

    private async Task UpdateComment(Comment comment)
    {
        var parameters = new DialogParameters<EditCommentDialog> { { x => x.Comment, comment } };
        var dialog = await DialogService.ShowAsync<EditCommentDialog>(Localizer["CommentEdit"], parameters, new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (result is null) return;
        if (result.Canceled) return;

        if (result.Data is not Comment updatedComment) return;

        await UnitOfWork.Comments.UpdateAsync(updatedComment);
        await UnitOfWork.CompleteAsync();
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
    }

    private async Task PostComment()
    {
        if (_thesis is null || _currentUserId is null) return;

        var external = (await UnitOfWork.Teachers.GetAllAsync())?.Where(t => t.User.Id == _currentUserId).Cast<ExternalTeacher>().FirstOrDefault();

        if (external is null) return;

        var comment = new Comment
        {
            Text = _commentText,
            ThesisId = _thesis.Id,
            ExternalId = external.Id
        };
        await UnitOfWork.Comments.AddAsync(comment);
        await UnitOfWork.CompleteAsync();
        _commentText = string.Empty;
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
    }

    private async Task DeleteThesis(Thesis thesis)
    {
        var result = await DialogService.ShowMessageBox(Localizer["DissertationThesisDelete"], Localizer["DissertationThesisDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        foreach (var comment in thesis.Comments)
        {
            UnitOfWork.Comments.Delete(comment);
        }
        UnitOfWork.Theses.Delete(thesis);
        await UnitOfWork.CompleteAsync();
        NavigationManager.NavigateTo("/theses");
    }

    private async Task DeleteComment(Comment comment)
    {
        UnitOfWork.Comments.Delete(comment);
        await UnitOfWork.CompleteAsync();
        _thesis = await UnitOfWork.Theses.GetByGuidAsync(ThesisGuid);
    }
}