@page "/management/individual-plans/add"
@page "/management/individual-plans/edit/{IndividualPlanGuid}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IServiceProvider ServiceProvider
@inject IUnitOfWork UnitOfWork
@inject IStringLocalizer<Resources> Localizer
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject UsersService UsersService

@attribute [Authorize(Roles = $"{Admin.Role}, {Teacher.Role}")]

<PageTitle>@Localizer["IndividualPlanCreate"]</PageTitle>

<MudText Typo="Typo.h3">@Localizer["IndividualPlanTitle"]</MudText>

<MudForm @ref="_form">
    <MudAutocomplete T="Student" Required RequiredError="@Localizer["IndividualPlanStudentError"]" Label="@Localizer["IndividualPlanStudent"]" ToStringFunc="@(s => s is null ? null : s.User.DisplayName)" SearchFunc="SearchStudents" Variant="Variant.Outlined" @bind-Value="@_selectedStudent" />
    @if (_selectedStudent is not null) {
        @if (_selectedStudent.Thesis is not null)
        {
            @if (_selectedStudent.HasInfo)
            {
                <MudDatePicker ShowToolbar="false" Label="@Localizer["Birthdate"]" Variant="Variant.Outlined" @bind-Date="_selectedStudent.User.Birthdate" ReadOnly />
                <MudField T="string" Label="@Localizer["Address"]" Variant="Variant.Outlined">@_selectedStudent.Address?.FullAddress</MudField>
                <MudField T="string" Label="@Localizer["PhoneNumber"]" Variant="Variant.Outlined">@_selectedStudent.User.PhoneNumber</MudField>
                <MudField T="string" Label="@Localizer["StudyForm"]" Variant="Variant.Outlined">@(_selectedStudent.IsExternal ? Localizer["StudyFormExternal"] : Localizer["StudyFormDaily"])</MudField>
                <MudField T="string" Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined">@_selectedStudent.StudyProgram?.Name</MudField>
                <MudField T="string" Label="@Localizer["StudyField"]" Variant="Variant.Outlined">@_selectedStudent.StudyProgram?.StudyFieldName</MudField>
                <MudField T="string" Label="@Localizer["Supervisor"]" Variant="Variant.Outlined">@_selectedStudent.Thesis.Supervisor.User.DisplayName</MudField>
                <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanStudyStartDateError"]" Label="@Localizer["IndividualPlanStudyStartDate"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.StudyStartDate" />
            }
            else
            {
                <MudText Color="Color.Error">@Localizer["IndividualPlanError"]</MudText>
            }
        }
        else
        {
            <MudText Color="Color.Error">@Localizer["IndividualPlanThesisError"]</MudText>
        }
    }

    <MudText Typo="Typo.h5">@Localizer["Deadlines"]</MudText>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">@Localizer["IndividualPlanDissertationExamDateInfo"]</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanDissertationExamDateError"]" Label="@Localizer["IndividualPlanDissertationExamDate"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.DissertationExamDate" />
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">@Localizer["IndividualPlanDissertationSubmissionDateInfo"]</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanDissertationSubmissionDateError"]" Label="@Localizer["IndividualPlanDissertationSubmissionDate"]" Variant="Variant.Outlined" FixDay="1" OpenTo="OpenTo.Month" @bind-Date="_individualPlan.DissertationSubmissionDate" />
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudText Class="width-half">@Localizer["IndividualPlanStudyEndDateInfo"]</MudText>
        <MudDatePicker ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanStudyEndDateError"]" Label="@Localizer["IndividualPlanStudyEndDate"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.StudyEndDate" />
    </MudStack>

    <MudText Typo="Typo.h4">@Localizer["StudyPart"]</MudText>

    <MudText Typo="Typo.h5">@Localizer["IndividualPlanSubjectsInfo"]</MudText>
    @if (_selectedSubjects.Length == 3 && _subjects is not null)
    {
        <MudSelect T="Subject" Required RequiredError="@Localizer["IndividualPlanSubjectError"]" Label="@($"{Localizer["Subject"]} 1")" ToStringFunc="@(s => s is null ? null : s.Name)" Variant="Variant.Outlined" @bind-Value="_selectedSubjects[0]">
            @foreach (var subject in _subjects)
            {
                <MudSelectItem Value="subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="Subject" Required RequiredError="@Localizer["IndividualPlanSubjectError"]" Label="@($"{Localizer["Subject"]} 2")" ToStringFunc="@(s => s is null ? null : s.Name)" Variant="Variant.Outlined" @bind-Value="_selectedSubjects[1]">
            @foreach (var subject in _subjects)
            {
                <MudSelectItem Value="subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="Subject" Required RequiredError="@Localizer["IndividualPlanSubjectError"]" Label="@($"{Localizer["Subject"]} 3")" ToStringFunc="@(s => s is null ? null : s.Name)" Variant="Variant.Outlined" @bind-Value="_selectedSubjects[2]">
            @foreach (var subject in _subjects)
            {
                <MudSelectItem Value="subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>
    }
    <MudTextField T="string" Label="@Localizer["IndividualPlanThematicAreas"]" Variant="Variant.Outlined" @bind-Value="_individualPlan.ThematicAreas" />

    <MudText Typo="Typo.h5">@Localizer["IndividualPlanAdditionalSubjectsInfo"]</MudText>
    @if (_selectedOptionalSubjects.Length == 2 && _subjects is not null)
    {
        <MudSelect T="Subject" Label="@($"{Localizer["Subject"]} 1")" ToStringFunc="@(s => s is null ? null : s.Name)" Variant="Variant.Outlined" @bind-Value="_selectedOptionalSubjects[0]">
            @foreach (var subject in _subjects)
            {
                <MudSelectItem Value="subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="Subject" Label="@($"{Localizer["Subject"]} 2")" ToStringFunc="@(s => s is null ? null : s.Name)" Variant="Variant.Outlined" @bind-Value="_selectedOptionalSubjects[1]">
            @foreach (var subject in _subjects)
            {
                <MudSelectItem Value="subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>
    }

    <MudText Typo="Typo.h5">@Localizer["IndividualPlanWrittenThesisInfo"]</MudText>
    <MudTextField T="string" Label="@Localizer["IndividualPlanThesis"]" Required RequiredError="@Localizer["IndividualPlanThesisError"]" Variant="Variant.Outlined" @bind-Value="@_individualPlan.WrittenThesisTitle" />
    <MudTextField T="string" Label="@Localizer["IndividualPlanWrittenThesisRequiredLiterature"]" Required RequiredError="@Localizer["IndividualPlanWrittenThesisLiteratureError"]" Variant="Variant.Outlined" AutoGrow Lines="10" @bind-Value="@_individualPlan.WrittenThesisRequiredLiterature" />
    <MudTextField T="string" Label="@Localizer["IndividualPlanWrittenThesisRecommendedLiterature"]" Required RequiredError="@Localizer["IndividualPlanWrittenThesisLiteratureError"]" Variant="Variant.Outlined" AutoGrow Lines="10" @bind-Value="@_individualPlan.WrittenThesisRecommendedLiterature" />
    <MudTextField T="string" Label="@Localizer["IndividualPlanWrittenThesisRecommendedLectures"]" Required RequiredError="@Localizer["IndividualPlanWrittenThesisRecommendedLecturesError"]" Variant="Variant.Outlined" AutoGrow Lines="8" @bind-Value="@_individualPlan.WrittenThesisRecommendedLectures" />

    <MudText Typo="Typo.h4">@Localizer["ScientificPart"]</MudText>

    @if (_selectedStudent?.Thesis is not null) {
        <MudField T="Thesis" Label="@Localizer["IndividualPlanThesis"]" Variant="Variant.Outlined">@_selectedStudent.Thesis.Title</MudField>
        <MudField T="string" Label="@Localizer["IndividualThesisResearchTask"]" Variant="Variant.Outlined">@_selectedStudent.Thesis.ResearchTask</MudField>
        <MudField T="string" Label="@Localizer["IndividualPlanSolutionResults"]" Variant="Variant.Outlined">@_selectedStudent.Thesis.SolutionResults</MudField>
    }

    <MudStack>
        <MudStack Row>
            <MudText Typo="Typo.h5">@Localizer["IndividualPlanSolvingProcedure"]</MudText>
            <MudSpacer />
            <MudText Typo="Typo.h5">@Localizer["IndividualPlanDeadline"]</MudText>
        </MudStack>
        @if (_individualPlan.TaskDeadlines.Length == 6 && _individualPlan.Tasks.Length == 6)
        {
            <MudStack Row>
                <MudTextField Class="flex-1" T="string" Required Variant="Variant.Outlined" AutoGrow @bind-Value="_individualPlan.Tasks[0]" />
                <MudDatePicker Class="flex-none" ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanTaskError"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.TaskDeadlines[0]" />
            </MudStack>
            <MudStack Row>
                <MudTextField Class="flex-1" T="string" Required Variant="Variant.Outlined" AutoGrow @bind-Value="_individualPlan.Tasks[1]" />
                <MudDatePicker Class="flex-none" ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanTaskError"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.TaskDeadlines[1]" />
            </MudStack>
            <MudStack Row>
                <MudTextField Class="flex-1" T="string" Required Variant="Variant.Outlined" AutoGrow @bind-Value="_individualPlan.Tasks[2]" />
                <MudDatePicker Class="flex-none" ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanTaskError"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.TaskDeadlines[2]" />
            </MudStack>
            <MudStack Row>
                <MudTextField Class="flex-1" T="string" Required Variant="Variant.Outlined" AutoGrow @bind-Value="_individualPlan.Tasks[3]" />
                <MudDatePicker Class="flex-none" ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanTaskError"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.TaskDeadlines[3]" />
            </MudStack>
            <MudStack Row>
                <MudTextField Class="flex-1" T="string" Required Variant="Variant.Outlined" AutoGrow @bind-Value="_individualPlan.Tasks[4]" />
                <MudDatePicker Class="flex-none" ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanTaskError"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.TaskDeadlines[4]" />
            </MudStack>
            <MudStack Row>
                <MudTextField Class="flex-1" T="string" Required Variant="Variant.Outlined" AutoGrow @bind-Value="_individualPlan.Tasks[5]" />
                <MudDatePicker Class="flex-none" ShowToolbar="false" Required RequiredError="@Localizer["IndividualPlanTaskError"]" Variant="Variant.Outlined" @bind-Date="_individualPlan.TaskDeadlines[5]" />
            </MudStack>
        }
    </MudStack>

    <MudButton class="mt-4" OnClick="HandleIndividualPlan" Variant="Variant.Filled" Color="Color.Primary">@(IndividualPlanGuid is null ? Localizer["Add"] : Localizer["Edit"])</MudButton>
</MudForm>

@code {
    [Parameter]
    public string? IndividualPlanGuid { get; set; }

    private string? _currentUserRole;
    private string? _currentUserId;

    private MudForm? _form;
    private IEnumerable<Student>? _students;
    private IEnumerable<Subject>? _subjects;

    private IndividualPlan _individualPlan = new();
    private Student? _selectedStudent;
    private Subject[] _selectedSubjects = new Subject[3];
    private Subject[] _selectedOptionalSubjects = new Subject[2];

    protected override async Task OnInitializedAsync()
    {
        _currentUserRole = await UsersService.GetCurrentUserRoleAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();

        if (IndividualPlanGuid is not null)
        {
            var individualPlan = await UnitOfWork.IndividualPlans.GetByGuidAsync(IndividualPlanGuid);
            if (individualPlan is not null)
            {
                _individualPlan = individualPlan;
                _selectedStudent = _individualPlan.Student;
                _selectedSubjects = _individualPlan.Subjects.Take(3).ToArray();
                Array.Copy(_individualPlan.OptionalSubjects.ToArray(), _selectedOptionalSubjects, _individualPlan.OptionalSubjects.Count);
            }
        }
        else
        {
            _individualPlan.Tasks = Enumerable.Repeat(string.Empty, 6).ToArray();
            _individualPlan.TaskDeadlines = new DateTime?[6];

            _individualPlan.StudyStartDate = new DateTime(DateTime.Now.Year, 9, 1);
            _individualPlan.DissertationExamDate = new DateTime(DateTime.Now.Year + 1, 9, 6);
            _individualPlan.DissertationSubmissionDate = new DateTime(DateTime.Now.Year + 3, 4, 1);
            _individualPlan.StudyEndDate = new DateTime(DateTime.Now.Year + 3, 8, 31);

            _individualPlan.TaskDeadlines[0] = new DateTime(DateTime.Now.Year, 12, 1);
            _individualPlan.TaskDeadlines[1] = new DateTime(DateTime.Now.Year + 1, 6, 1);
            _individualPlan.TaskDeadlines[2] = new DateTime(DateTime.Now.Year + 1, 12, 1);
            _individualPlan.TaskDeadlines[3] = new DateTime(DateTime.Now.Year + 2, 6, 1);
            _individualPlan.TaskDeadlines[4] = new DateTime(DateTime.Now.Year + 2, 12, 1);
            _individualPlan.TaskDeadlines[5] = new DateTime(DateTime.Now.Year + 3, 4, 1);
        }

        _students = await UnitOfWork.Students.GetAllAsync();
        _subjects = await UnitOfWork.Subjects.GetAllAsync();

        if (_currentUserRole == Teacher.Role)
        {
            _students = _students?.Where(s => s.Thesis?.Supervisor.User.Id == _currentUserId);
        }
    }

    private Task<IEnumerable<Student>?> SearchStudents(string search, CancellationToken token)
    {
        var students = _students?.Where(s => s.IndividualPlan is null);
        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(students);

        return Task.FromResult(students?.Where(s => s.User.DisplayName is not null && s.User.DisplayName.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private Task<IEnumerable<Subject>> SearchSubjects(string search, CancellationToken token)
    {
        if (_subjects is null) return Task.FromResult(Enumerable.Empty<Subject>());

        var subjects = _subjects.Where(t => t.StudyProgram == _selectedStudent?.StudyProgram);
        if (string.IsNullOrWhiteSpace(search))
            return Task.FromResult(subjects);

        return Task.FromResult(subjects.Where(s => s.Name.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task HandleIndividualPlan()
    {
        if (_form is null || _selectedStudent is null || _selectedStudent.Thesis is null) return;

        await _form.Validate();
        if (_form.IsValid)
        {
            _individualPlan.StudyStartDate = _individualPlan.StudyStartDate?.ToUniversalTime();
            _individualPlan.DissertationExamDate = _individualPlan.DissertationExamDate?.ToUniversalTime();
            _individualPlan.DissertationSubmissionDate = _individualPlan.DissertationSubmissionDate?.ToUniversalTime();
            _individualPlan.StudyEndDate = _individualPlan.StudyEndDate?.ToUniversalTime();
            _individualPlan.TaskDeadlines = _individualPlan.TaskDeadlines.Select(d => { d = d?.ToUniversalTime(); return d; }).ToArray();

            _individualPlan.Student = _selectedStudent;
            _individualPlan.Subjects = _selectedSubjects.ToList();
            _individualPlan.OptionalSubjects = _selectedOptionalSubjects.Where(s => s is not null).Cast<Subject>().ToList();

            if (IndividualPlanGuid is null)
            {
                await UnitOfWork.IndividualPlans.AddAsync(_individualPlan);
            }
            else
            {
                await UnitOfWork.IndividualPlans.UpdateAsync(_individualPlan);
            }

            await UnitOfWork.CompleteAsync();
            NavigationManager.NavigateTo("/management/individual-plans");
        }
    }
}
