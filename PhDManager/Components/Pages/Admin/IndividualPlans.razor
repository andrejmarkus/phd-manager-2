@page "/admin/individual-plans"

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject DocumentService DocumentService

@using Microsoft.Extensions.Localization
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

<PageTitle>@Localizer["IndividualPlans"] | Admin</PageTitle>

<MudDataGrid T="IndividualPlan" Items="_individualPlans" Hover SortMode="SortMode.Multiple" QuickFilter="_quickFilter" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6" GutterBottom="false">@Localizer["IndividualPlans"]</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/admin/individual-plans/add">@Localizer["IndividualPlanAdd"]</MudButton>
        <MudTextField Class="ml-4" Variant="Variant.Outlined" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" @bind-Value="_search" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="ip => ip.Student.StudentThesis!.Title" Title="@Localizer["DissertationThesisTitle"]" />
        <PropertyColumn Property="ip => ip.Student.StudentThesis!.Supervisor.DisplayName" Title="@Localizer["SupervisorName"]" />
        <PropertyColumn Property="ip => ip.Student.StudentThesis!.Supervisor.Email" Title="@Localizer["SupervisorEmail"]" />
        <PropertyColumn Property="ip => ip.Student.DisplayName" Title="@Localizer["StudentName"]" />
        <PropertyColumn Property="ip => ip.Student.Email" Title="@Localizer["StudentEmail"]" />
        <TemplateColumn Title="@Localizer["IndividualPlanEdit"]">
            <CellTemplate>
                <MudStack Row>
                    @if (context.Item.Student.StudentIndividualPlan is not null)
                    {
                        <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await DeleteIndividualPlan(context.Item))" />
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" Href="@($"/admin/individual-plans/edit/{context.Item.Guid}")" />
                        <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Print" OnClick="@(async () => await DocumentService.DownloadIndividualPlanDocument(context.Item))" />
                    }
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="IndividualPlan" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<IndividualPlan>? _individualPlans;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _individualPlans = await UnitOfWork.IndividualPlans.GetAllAsync();
        _individualPlans = _individualPlans?.Where(ip => ip.Student.StudentThesis is not null);
    }

    private Func<IndividualPlan, bool> _quickFilter => ip =>
    {
        if (ip.Student.StudentThesis is null)
            return false;

        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (ip.Student.StudentThesis.Title.Contains(_search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (ip.Student.StudentThesis.Supervisor.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (ip.Student.StudentThesis.Supervisor.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (ip.Student.DisplayName?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (ip.Student.Email?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if ($"{ip.Student.StudentThesis.Title} {ip.Student.StudentThesis.Supervisor.DisplayName} {ip.Student.StudentThesis.Supervisor.Email} {ip.Student.DisplayName} {ip.Student.Email}".Contains(_search))
            return true;

        return false;
    };

    private async Task DeleteIndividualPlan(IndividualPlan individualPlan)
    {
        bool? result = await DialogService.ShowMessageBox(Localizer["IndividualPlanDelete"], Localizer["IndividualPlanDeleteConfirmation"], Localizer["Yes"], Localizer["No"]);
        if (result == false) return;

        await UnitOfWork.IndividualPlans.DeleteAsync(individualPlan.Id);
        await UnitOfWork.CompleteAsync();
    }
}
