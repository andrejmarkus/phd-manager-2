@page "/theses"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PhDManager.Data
@using PhDManager.Models
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IServiceProvider ServiceProvider
@inject UsersService UsersService
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Theses</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Dizertačné témy</MudText>

<MudStack Row>
    <AuthorizeView Roles="Admin, Učiteľ">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/theses/add">Pridať tému</MudButton>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Admin, Učiteľ, Externista">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/theses/review">Potvrdiť tému</MudButton>
        </Authorized>
    </AuthorizeView>
</MudStack>

<MudStack Row>
    <MudTextField FullWidth T="string" @bind-Value="@_search" @bind-Value:after="UpdateSearch" Immediate="true" Label="Vyhľadaj" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    @if (_studyPrograms is not null)
    {
        <MudSelect T="StudyProgram" @bind-Value="@_selectedStudyProgram" @bind-Value:after="UpdateSearch" Immediate="true" Label="Študíjny odbor" Variant="Variant.Outlined">
            <MudSelectItem T="StudyProgram" Value="null">Všetky</MudSelectItem>
            @foreach (var studyProgram in _studyPrograms)
            {
                <MudSelectItem Value="@studyProgram">@studyProgram.Name</MudSelectItem>
            }
        </MudSelect>
    }
    @if (_teachers is not null)
    {
        <MudSelect T="ApplicationUser" @bind-Value="@_selectedTeacher" @bind-Value:after="UpdateSearch" Immediate="true" Label="Školiteľ" Variant="Variant.Outlined">
            <MudSelectItem T="ApplicationUser" Value="null">Všetci</MudSelectItem>
            @foreach (var teacher in _teachers)
            {
                <MudSelectItem Value="@teacher">@teacher.DisplayName</MudSelectItem>
            }
        </MudSelect>
    }
</MudStack>

<MudGrid Class="mt-1">
    @if (_theses is not null)
    {
        @foreach (var thesis in _theses)
        {
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h6">@thesis.Title</MudText>
                    <MudText Typo="Typo.body2"><b>Školiteľ: </b> @thesis.Supervisor.DisplayName</MudText>
                    <MudText Typo="Typo.body2"><b>Študijný program: </b> @thesis.StudyProgram.Name</MudText>
                    <div class="d-flex justify-space-between mt-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/{thesis.Guid}")">Detail</MudButton>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <div class="d-flex gap-1">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/edit/{thesis.Guid}")">Uprav</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteThesis(thesis))">Vymaž</MudButton>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                        <AuthorizeView Roles="Učiteľ">
                            <Authorized>
                                @if (_currentUserId?.Equals(thesis.SupervisorId) == true)
                                {
                                    <div class="d-flex gap-1">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/theses/edit/{thesis.Guid}")">Uprav</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteThesis(thesis))">Vymaž</MudButton>
                                    </div>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private IEnumerable<Thesis>? _theses;
    private IEnumerable<StudyProgram>? _studyPrograms;
    private IEnumerable<ApplicationUser>? _teachers;
    private string? _currentUserId;

    private string _search = "";
    private StudyProgram? _selectedStudyProgram;
    private ApplicationUser? _selectedTeacher;

    protected override async Task OnInitializedAsync()
    {
        var theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = theses?.Where(t => t.IsApproved).ToArray();
        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
        _teachers = await UserManager.Users.ToAsyncEnumerable().WhereAwait(async u =>
        {
            using var scope = ServiceProvider.CreateScope();
            var usersService = scope.ServiceProvider.GetRequiredService<UsersService>();
            var role = await usersService.GetUserRoleAsync(u);
            return role == "Učiteľ";
        }).ToArrayAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();
    }

    private async Task DeleteThesis(Thesis thesis)
    {
        if (thesis.IndividualPlan is not null)
        {
            await UnitOfWork.IndividualPlans.DeleteAsync(thesis.IndividualPlan.Id);
        }
        await UnitOfWork.Theses.DeleteAsync(thesis.Id);
        await UnitOfWork.CompleteAsync();
        _theses = _theses?.Where(t => t.Id != thesis.Id);
    }

    private async Task UpdateSearch()
    {
        var theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = theses?.Where(t => t.IsApproved).Where(t => t.Title.ToLower().Contains(_search.ToLower()) || t.TitleEnglish?.ToLower().Contains(_search.ToLower()) == true).ToArray();
        if (_selectedStudyProgram is not null) {
            _theses = _theses?.Where(t => t.StudyProgram == _selectedStudyProgram).ToArray();
        }
        if (_selectedTeacher is not null) {
            _theses = _theses?.Where(t => t.Supervisor == _selectedTeacher).ToArray();
        }
    }
}
