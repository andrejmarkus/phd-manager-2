@page "/theses"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Models
@using PhDManager.Models.Roles
@using PhDManager.Services
@using PhDManager.Services.IRepositories

@rendermode InteractiveServer

@inject IUnitOfWork UnitOfWork
@inject IServiceProvider ServiceProvider
@inject IDialogService DialogService
@inject IStringLocalizer<Resources> Localizer
@inject IStringLocalizer<Enums> EnumLocalizer
@inject UsersService UsersService
@inject DocumentService DocumentService
@inject UserManager<ApplicationUser> UserManager
@inject SchoolYearService SchoolYearService

<PageTitle>@Localizer["DissertationTheses"]</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["DissertationTheses"]</MudText>

<MudStack Row>
    <MudTextField FullWidth T="string" @bind-Value="@_search" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["Search"]" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    @if (_studyPrograms is not null)
    {
        <MudSelect T="StudyProgram" @bind-Value="@_selectedStudyProgram" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["StudyProgram"]" Variant="Variant.Outlined">
            <MudSelectItem T="StudyProgram" Value="null">@Localizer["All"]</MudSelectItem>
            @foreach (var studyProgram in _studyPrograms)
            {
                <MudSelectItem Value="@studyProgram">@studyProgram.Name</MudSelectItem>
            }
        </MudSelect>
    }
    @if (_teachers is not null)
    {
        <MudSelect T="Teacher" @bind-Value="@_selectedTeacher" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["Supervisor"]" Variant="Variant.Outlined">
            <MudSelectItem T="Teacher" Value="null">@Localizer["AllPeople"]</MudSelectItem>
            @foreach (var teacher in _teachers)
            {
                <MudSelectItem Value="@teacher">@teacher.User.DisplayName</MudSelectItem>
            }
        </MudSelect>
    }
    <MudSelect T="bool?" @bind-Value="@_available" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["Occupancy"]" Variant="Variant.Outlined">
        <MudSelectItem T="bool?" Value="null">@Localizer["All"]</MudSelectItem>
        <MudSelectItem T="bool?" Value="false">@Localizer["OccupancyAvailable"]</MudSelectItem>
        <MudSelectItem T="bool?" Value="true">@Localizer["OccupancyOccupied"]</MudSelectItem>
    </MudSelect>
    <MudSelect T="bool?" @bind-Value="@_studyForm" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["StudyForm"]" Variant="Variant.Outlined">
        <MudSelectItem T="bool?" Value="null">@Localizer["All"]</MudSelectItem>
        <MudSelectItem T="bool?" Value="true">@Localizer["StudyFormDaily"]</MudSelectItem>
        <MudSelectItem T="bool?" Value="false">@Localizer["StudyFormExternal"]</MudSelectItem>
    </MudSelect>
    @if (_schoolYears is not null)
    {
        <MudSelect T="string" @bind-Value="@_selectedSchoolYear" @bind-Value:after="UpdateSearch" Immediate Label="@Localizer["SchoolYear"]" Variant="Variant.Outlined">
            @foreach (var schoolYear in _schoolYears)
            {
                <MudSelectItem Value="@schoolYear">@schoolYear</MudSelectItem>
            }
        </MudSelect>
    }
</MudStack>

<MudGrid Class="mt-1">
    @if (_theses is not null)
    {
        @foreach (var thesis in _theses)
        {
            <MudItem xs="6" md="4" lg="3">
                <MudPaper Class="pa-2">
                    <MudLink Color="Color.Default" Underline="Underline.None" Href="@($"/theses/{thesis.Guid}")">
                        <MudText Typo="Typo.h6">@thesis.Title</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["Supervisor"]: </b>@thesis.Supervisor.User.DisplayName</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["StudyProgram"]: </b>@thesis.StudyProgram.Name</MudText>
                        <MudText Typo="Typo.body2"><b>@Localizer["StudyForm"]: </b>
                            @if (thesis.DailyStudy)
                            {
                                <span>@EnumLocalizer["StudyFormDaily"]</span>
                            }
                            @if (thesis.DailyStudy && thesis.ExternalStudy)
                            {
                                <span>, </span>
                            }
                            @if (thesis.ExternalStudy)
                            {
                                <span>@EnumLocalizer["StudyFormExternal"]</span>
                            }
                        </MudText>
                    </MudLink>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private IEnumerable<Thesis>? _theses;
    private IEnumerable<StudyProgram>? _studyPrograms;
    private IEnumerable<Teacher>? _teachers;
    private IEnumerable<string>? _schoolYears;

    private string? _currentUserId;
    private StudyProgram? _selectedStudyProgram;
    private Teacher? _selectedTeacher;
    private string? _selectedSchoolYear;
    private bool? _available;
    private bool? _studyForm;
    private string _search = "";

    protected override async Task OnInitializedAsync()
    {
        _theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = _theses?.Where(t => t.IsApproved).ToArray();
        _studyPrograms = await UnitOfWork.StudyPrograms.GetAllAsync();
        _teachers = await UnitOfWork.Teachers.GetAllAsync();
        _schoolYears = await UnitOfWork.Theses.GetAllSchoolYearsAsync();
        _currentUserId = await UsersService.GetCurrentUserIdAsync();

        _selectedSchoolYear = SchoolYearService.CurrentSchoolYear;
    }

    private async Task UpdateSearch()
    {
        var theses = await UnitOfWork.Theses.GetAllAsync();
        _theses = theses?.Where(t => t.IsApproved).Where(t => t.Title.ToLower().Contains(_search.ToLower()) || t.TitleEnglish?.ToLower().Contains(_search.ToLower()) == true).ToArray();
        if (_selectedStudyProgram is not null)
        {
            _theses = _theses?.Where(t => t.StudyProgram == _selectedStudyProgram).ToArray();
        }
        if (_selectedTeacher is not null)
        {
            _theses = _theses?.Where(t => t.Supervisor == _selectedTeacher).ToArray();
        }
        if (_selectedSchoolYear is not null) {
            _theses = _theses?.Where(t => t.SchoolYear == _selectedSchoolYear).ToArray();
        }
        if (_available is not null)
        {
            _theses = _theses?.Where(t => t.Student is not null == _available).ToArray();
        }
        if (_studyForm is not null)
        {
            if (_studyForm == true)
            {
                _theses = _theses?.Where(t => t.DailyStudy).ToArray();
            }
            else
            {
                _theses = _theses?.Where(t => t.ExternalStudy).ToArray();
            }
        }
    }
}
