@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization
@using PhDManager.Data
@using PhDManager.Locales
@using PhDManager.Services

@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<Resources> Localizer
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>@Localizer["ManageEmail"]</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">@Localizer["ManageEmail"]</MudText>

@if (user is not null)
{
    @if (user.IsExternal)
    {
        <StatusMessage Message="@message" />

        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken />
        </form>
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <MudGrid>

                @if (isEmailConfirmed)
                {
                    <MudItem md="12">
                        <MudStaticTextField Variant="Variant.Outlined" Value="@email" Label="@Localizer["Email"]" Placeholder="@Localizer["EmailHelper"]" Disabled="true" AdornmentIcon="Icons.Material.Filled.Check" AdornmentColor="Color.Success" />
                    </MudItem>
                }
                else
                {
                    <MudItem md="12">
                        <MudStaticTextField Variant="Variant.Outlined" Value="@email" Label="@Localizer["Email"]" Placeholder="@Localizer["EmailHelper"]" Disabled="true" />
                    </MudItem>
                    <MudItem md="12">
                        <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">@Localizer["EmailSendVerification"]</MudStaticButton>
                    </MudItem>
                }

                <MudItem md="12">
                    <MudStaticTextField Variant="Variant.Outlined" @bind-Value="@Input.NewEmail" For="@(() => Input.NewEmail)" Label="@Localizer["NewEmail"]" HelperText="@Localizer["NewEmailHelper"]" />
                </MudItem>

                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">@Localizer["ChangeEmail"]</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    }
    else
    {
        <MudAlert Severity="Severity.Error">@Localizer["ManageEmailUserError"]</MudAlert>
    }
}

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = Localizer["EmailUnchanged"];
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = Localizer["EmailConfirmation"];
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = Localizer["EmailVerification"];
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
